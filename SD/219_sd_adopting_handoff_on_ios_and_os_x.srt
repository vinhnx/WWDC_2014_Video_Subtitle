

1
00:00:00.506 --> 00:00:11.336 A:middle
[ Silence ]

2
00:00:11.836 --> 00:00:12.356 A:middle
&gt;&gt; All right.

3
00:00:12.396 --> 00:00:13.636 A:middle
Good afternoon everyone.

4
00:00:14.606 --> 00:00:16.175 A:middle
Thank you for coming here

5
00:00:16.175 --> 00:00:19.446 A:middle
to Adopting Handoff
on iOS and OS X.

6
00:00:20.026 --> 00:00:23.146 A:middle
I'm Michael Jurewitz, I'm the
Lead Engineering Project Manager

7
00:00:23.146 --> 00:00:26.746 A:middle
for Continuity and I'm super
excited to be here today to talk

8
00:00:26.746 --> 00:00:29.806 A:middle
to you about Adopting
Handoff in your applications.

9
00:00:30.026 --> 00:00:33.326 A:middle
A little bit later, I'm going
to be joined by Vince Spader

10
00:00:33.326 --> 00:00:36.386 A:middle
and Keith Stattenfield to
talk more in this session,

11
00:00:37.166 --> 00:00:40.516 A:middle
but as you saw on Monday,
Handoff is a huge part

12
00:00:40.516 --> 00:00:44.156 A:middle
of the releases for
both iOS and OS X.

13
00:00:44.346 --> 00:00:47.406 A:middle
And I'm really happy to be the
second person at least this week

14
00:00:47.406 --> 00:00:49.076 A:middle
to be able to talk to
you more about them.

15
00:00:49.836 --> 00:00:51.146 A:middle
So if you look at this feature,

16
00:00:51.856 --> 00:00:55.136 A:middle
you can really see the big goal
is that we want it to be easy

17
00:00:55.136 --> 00:00:59.326 A:middle
for the user, for all of you to
take what they're doing and move

18
00:00:59.326 --> 00:01:02.906 A:middle
that between whatever Apple
device they happen to be using.

19
00:01:03.476 --> 00:01:07.826 A:middle
So all continuity, Handoff in
particular, is all about having

20
00:01:07.826 --> 00:01:12.026 A:middle
that seamless experience between
apps on different devices.

21
00:01:12.676 --> 00:01:15.986 A:middle
So now today, we'll take a look
at what we're actually going

22
00:01:15.986 --> 00:01:17.006 A:middle
to learn in this session today.

23
00:01:17.006 --> 00:01:20.296 A:middle
So first of all, we'll take a
quick look at what is Handoff.

24
00:01:20.296 --> 00:01:21.876 A:middle
How does this feature work?

25
00:01:21.876 --> 00:01:24.116 A:middle
You saw a little bit
about that on Monday,

26
00:01:24.116 --> 00:01:25.746 A:middle
and so we'll dive
into that a bit more.

27
00:01:26.416 --> 00:01:29.326 A:middle
Next, we'll take a look at
actually adopting Handoff

28
00:01:29.326 --> 00:01:32.906 A:middle
in your applications, so
that's a super-simple API.

29
00:01:32.986 --> 00:01:34.656 A:middle
I'm very happy to be
able to tell you that.

30
00:01:34.656 --> 00:01:38.666 A:middle
There are different integration
points in both AppKit and UIKit

31
00:01:38.666 --> 00:01:40.966 A:middle
for being able to take
advantage of this in your app,

32
00:01:40.966 --> 00:01:42.166 A:middle
and so we'll take
a look at those.

33
00:01:42.366 --> 00:01:45.066 A:middle
And then we'll round things
out by actually taking an

34
00:01:45.066 --> 00:01:47.846 A:middle
in depth look at some pretty
advanced things you can do

35
00:01:47.846 --> 00:01:49.396 A:middle
with Handoff that
are super cool.

36
00:01:49.396 --> 00:01:53.246 A:middle
All right, so what is Handoff?

37
00:01:54.706 --> 00:01:57.586 A:middle
Well, I think we've all been
stuck here before, right?

38
00:01:57.636 --> 00:01:59.296 A:middle
You're using one
of your devices.

39
00:01:59.296 --> 00:02:01.166 A:middle
Maybe you're browsing
on a website,

40
00:02:01.926 --> 00:02:04.436 A:middle
and what you really
want to be able to do is

41
00:02:04.436 --> 00:02:06.416 A:middle
to take what you were
doing on that device

42
00:02:06.816 --> 00:02:08.216 A:middle
and move over to another one.

43
00:02:08.216 --> 00:02:10.826 A:middle
And a lot of times, that
can be kind of cumbersome.

44
00:02:10.826 --> 00:02:14.426 A:middle
Maybe you're having to go and
fish out the app on your iPad.

45
00:02:14.426 --> 00:02:16.656 A:middle
You have to go back to
where you were in that app,

46
00:02:16.956 --> 00:02:18.216 A:middle
reload a bunch of state.

47
00:02:18.826 --> 00:02:20.686 A:middle
Maybe you didn't even
have your data sync

48
00:02:20.686 --> 00:02:23.236 A:middle
across in the first place,
so it's even more of a pain.

49
00:02:24.336 --> 00:02:27.696 A:middle
And so Handoff is all about
making it super simple to make

50
00:02:27.766 --> 00:02:29.476 A:middle
that jump between your devices.

51
00:02:30.236 --> 00:02:32.386 A:middle
So as you're on your Mac and
you're browsing something

52
00:02:32.656 --> 00:02:37.136 A:middle
like Safari, on the lower left
corner of your iPad or any

53
00:02:37.136 --> 00:02:40.386 A:middle
of the rest of your devices,
you'll see an icon shows up.

54
00:02:40.926 --> 00:02:44.966 A:middle
You can swipe that icon up and
we immediately bring you back

55
00:02:45.056 --> 00:02:47.806 A:middle
to exactly what you were
doing in that application.

56
00:02:48.296 --> 00:02:50.026 A:middle
Wonderful seamless experience.

57
00:02:51.256 --> 00:02:53.966 A:middle
And so how do we
actually do all this?

58
00:02:53.966 --> 00:02:54.946 A:middle
What's going on?

59
00:02:55.446 --> 00:02:58.226 A:middle
So the first thing to know
is that this is entirely

60
00:02:58.226 --> 00:03:02.586 A:middle
about the proximity of your
devices to your other devices.

61
00:03:03.366 --> 00:03:07.446 A:middle
So we use BTLE to
actually let devices

62
00:03:07.446 --> 00:03:10.926 A:middle
around you know what they should
show in that lower left corner.

63
00:03:12.166 --> 00:03:15.306 A:middle
And which devices actually
show your apps is linked

64
00:03:15.376 --> 00:03:17.416 A:middle
to the devices that
you are signed

65
00:03:17.416 --> 00:03:19.586 A:middle
into with the same
iCloud account.

66
00:03:20.366 --> 00:03:23.166 A:middle
So what we do is we know that
you're signed into this device

67
00:03:23.546 --> 00:03:25.186 A:middle
and we actually will
use the Cloud

68
00:03:25.486 --> 00:03:29.026 A:middle
to BTLE pair your different
devices to each other.

69
00:03:30.166 --> 00:03:33.926 A:middle
And when you actually go to
actually continue an activity

70
00:03:33.926 --> 00:03:36.686 A:middle
on another device,
we're actually moving

71
00:03:36.686 --> 00:03:39.796 A:middle
that data directly
from where you were

72
00:03:39.856 --> 00:03:41.566 A:middle
to where you want to go.

73
00:03:41.636 --> 00:03:44.476 A:middle
So it's all about
directly moving information

74
00:03:44.476 --> 00:03:45.836 A:middle
about that activity itself.

75
00:03:46.726 --> 00:03:48.276 A:middle
Now, where are you
actually going

76
00:03:48.276 --> 00:03:50.966 A:middle
to find the UI for Handoff?

77
00:03:50.966 --> 00:03:52.966 A:middle
Well, there's two
places on both platforms.

78
00:03:53.816 --> 00:03:57.916 A:middle
First, what you'll find is that
on iOS in the lower left corner

79
00:03:57.916 --> 00:04:01.076 A:middle
of the Lock screen, if
you're using your Mac

80
00:04:01.076 --> 00:04:04.126 A:middle
and other iOS device,
you'll see this icon show up

81
00:04:04.426 --> 00:04:06.676 A:middle
and this is your clue
that you can swipe this

82
00:04:06.676 --> 00:04:08.796 A:middle
up to get right back
to that application.

83
00:04:09.946 --> 00:04:12.966 A:middle
You'll also find that if you
double tap the Home button

84
00:04:13.146 --> 00:04:16.946 A:middle
and bring up the Multi-tasking
Switcher, you can go all the way

85
00:04:16.946 --> 00:04:19.786 A:middle
to the other side of the home
screen, and you'll see a pane

86
00:04:19.856 --> 00:04:22.166 A:middle
for an app that we see
that we know is nearby,

87
00:04:22.166 --> 00:04:25.836 A:middle
so you can resume from there as
well; so two different places,

88
00:04:25.836 --> 00:04:27.336 A:middle
super convenient
to get to those.

89
00:04:28.186 --> 00:04:32.286 A:middle
Now on the Mac, you've actually
got UI that's going to stick

90
00:04:32.286 --> 00:04:34.636 A:middle
around for you here in the
Dock if you're using an app

91
00:04:34.636 --> 00:04:35.476 A:middle
on a different device.

92
00:04:36.076 --> 00:04:39.616 A:middle
So for example, if I'm
on my iPad, or my iPhone,

93
00:04:39.616 --> 00:04:41.976 A:middle
or maybe even a different
Mac that I'm using something

94
00:04:41.976 --> 00:04:44.566 A:middle
like Mail, you'll
see it actually show

95
00:04:44.566 --> 00:04:47.486 A:middle
up in the Dock right at the end
there, and you can click on it

96
00:04:48.046 --> 00:04:49.686 A:middle
to get back to what
you were doing,

97
00:04:49.686 --> 00:04:51.146 A:middle
essentially to start
the handoff.

98
00:04:51.986 --> 00:04:55.486 A:middle
You'll also find it in Command
tab so that you can go ahead

99
00:04:55.486 --> 00:04:58.646 A:middle
and hit Command tab, cycle
through your apps that are there

100
00:04:58.646 --> 00:05:00.046 A:middle
and choose to pull
over the activity

101
00:05:00.046 --> 00:05:01.046 A:middle
that you want to
be working with.

102
00:05:01.336 --> 00:05:06.606 A:middle
Here you see this is you know
mail that came from my iPad.

103
00:05:07.116 --> 00:05:09.306 A:middle
Okay, so when it comes
to adopting Handoff,

104
00:05:09.306 --> 00:05:13.036 A:middle
there's really three main things
that you need to think about.

105
00:05:13.976 --> 00:05:16.556 A:middle
The first, and really this is
kind of the most important,

106
00:05:16.556 --> 00:05:18.576 A:middle
is deciding what activities

107
00:05:18.576 --> 00:05:20.676 A:middle
in your app you really
want to support.

108
00:05:21.126 --> 00:05:23.926 A:middle
Now this, it's kind of an
interesting thing to talk about,

109
00:05:23.926 --> 00:05:25.546 A:middle
but the fundamental unit

110
00:05:25.686 --> 00:05:28.136 A:middle
in Handoff is this
notion of an activity.

111
00:05:28.706 --> 00:05:30.316 A:middle
And what you really
want to be thinking

112
00:05:30.316 --> 00:05:32.536 A:middle
about are what does
the user think

113
00:05:32.536 --> 00:05:34.496 A:middle
about as they're using your app

114
00:05:35.066 --> 00:05:37.826 A:middle
about constituting say
different types of things.

115
00:05:37.826 --> 00:05:41.276 A:middle
So for example, in Mail,
you've got a very clear split

116
00:05:41.276 --> 00:05:44.516 A:middle
between I'm reading email
versus I'm writing email.

117
00:05:45.146 --> 00:05:47.466 A:middle
Those are two different types of
activities that you would want

118
00:05:47.466 --> 00:05:50.836 A:middle
to have and indeed that we do
have, in the case of Handoff.

119
00:05:51.396 --> 00:05:55.436 A:middle
So what you're trying to do is
not only provide a nice grouping

120
00:05:55.436 --> 00:05:58.926 A:middle
of these discrete tasks not
only just to make things simpler

121
00:05:58.926 --> 00:06:01.746 A:middle
for you, but also because,
as we'll talk about later,

122
00:06:02.126 --> 00:06:05.836 A:middle
when you go to resume these
activities on another device,

123
00:06:06.106 --> 00:06:08.906 A:middle
having some clear
separation between what type

124
00:06:08.936 --> 00:06:11.246 A:middle
of activity you're
actually trying to resume,

125
00:06:11.616 --> 00:06:12.736 A:middle
can be really important.

126
00:06:12.736 --> 00:06:14.316 A:middle
It can help you do
some much better things

127
00:06:14.316 --> 00:06:15.366 A:middle
in the user experience.

128
00:06:16.196 --> 00:06:17.906 A:middle
All right, so step two,

129
00:06:18.276 --> 00:06:21.196 A:middle
is actually creating the
activities in the first place.

130
00:06:21.426 --> 00:06:23.086 A:middle
This is also really easy to do.

131
00:06:23.086 --> 00:06:24.676 A:middle
We'll have a lot
to go into to talk

132
00:06:24.676 --> 00:06:25.956 A:middle
about how to actually do this.

133
00:06:26.766 --> 00:06:28.436 A:middle
And third and final,
you need to be able

134
00:06:28.436 --> 00:06:31.776 A:middle
to handle incoming activities
into your application.

135
00:06:31.776 --> 00:06:34.966 A:middle
So if your app gets
launched or gets resumed

136
00:06:35.536 --> 00:06:38.156 A:middle
and the system hands you
this activity to deal with,

137
00:06:38.156 --> 00:06:40.466 A:middle
you need to make sure that you
are basically taking the user

138
00:06:40.466 --> 00:06:43.856 A:middle
back to where they want
to be in your application.

139
00:06:44.756 --> 00:06:46.326 A:middle
So I mentioned this before,

140
00:06:46.326 --> 00:06:51.246 A:middle
but the fundamental unit here is
the activity when you're dealing

141
00:06:51.246 --> 00:06:55.816 A:middle
with Handoff, and specifically,
this is a single class.

142
00:06:56.206 --> 00:06:59.906 A:middle
It's NSUserActivity, and
I'm very happy to tell you

143
00:06:59.956 --> 00:07:01.576 A:middle
that it is only one class.

144
00:07:01.576 --> 00:07:04.276 A:middle
It has only a few
methods and it's the same

145
00:07:04.276 --> 00:07:05.586 A:middle
across both iOS and OS X.

146
00:07:05.586 --> 00:07:09.336 A:middle
So you get a chance to learn
how to do this in one place

147
00:07:09.336 --> 00:07:11.716 A:middle
and it's going to map completely
to the other platform.

148
00:07:11.716 --> 00:07:14.476 A:middle
You don't have to worry
about huge differences in API

149
00:07:14.476 --> 00:07:17.286 A:middle
or anything, so super
simple to use.

150
00:07:18.026 --> 00:07:20.566 A:middle
So as you're working
with NSUserActivity,

151
00:07:21.166 --> 00:07:23.376 A:middle
so you've got something
like Mail, for example.

152
00:07:23.766 --> 00:07:27.466 A:middle
As you are composing an
email, this is a great example

153
00:07:27.466 --> 00:07:30.116 A:middle
of a discrete activity
that's being done.

154
00:07:30.116 --> 00:07:32.166 A:middle
This is Mail saying
I'm composing.

155
00:07:33.166 --> 00:07:37.256 A:middle
And when you actually tell
this activity to become active

156
00:07:37.256 --> 00:07:40.946 A:middle
and become current, what
Become Current does is tells us

157
00:07:41.046 --> 00:07:45.086 A:middle
that this device should
start broadcasting to devices

158
00:07:45.086 --> 00:07:46.086 A:middle
around it that hey, this --

159
00:07:46.086 --> 00:07:51.446 A:middle
the user is doing something that
can be handed off and the rest

160
00:07:51.446 --> 00:07:54.126 A:middle
of the devices then can know
to be able to show things

161
00:07:54.126 --> 00:07:57.176 A:middle
like the icon that
corresponds to that app.

162
00:07:57.826 --> 00:07:59.976 A:middle
Now again, when you make
one of these activities,

163
00:08:00.516 --> 00:08:01.926 A:middle
this broadcasting goes out.

164
00:08:02.986 --> 00:08:05.246 A:middle
You end up with in the very
lower left corner there,

165
00:08:05.246 --> 00:08:09.096 A:middle
you get this icon that shows
up, and the user can go ahead

166
00:08:09.096 --> 00:08:10.146 A:middle
and resume from there.

167
00:08:11.076 --> 00:08:13.906 A:middle
Now the key thing here is that
when the user actually slides

168
00:08:13.906 --> 00:08:16.876 A:middle
up on the Lock Screen, the
device where they're going

169
00:08:16.946 --> 00:08:21.706 A:middle
to actually connects back
to the original device,

170
00:08:22.346 --> 00:08:24.976 A:middle
and what it's basically saying
is hey, the user is here.

171
00:08:25.346 --> 00:08:27.056 A:middle
They want this data quick.

172
00:08:27.056 --> 00:08:29.196 A:middle
Give me information
about the activity

173
00:08:29.196 --> 00:08:30.356 A:middle
that they were actually doing.

174
00:08:31.046 --> 00:08:33.106 A:middle
We handle all that for you.

175
00:08:33.106 --> 00:08:35.326 A:middle
The activity gets packaged up.

176
00:08:35.326 --> 00:08:38.785 A:middle
We send it across to the device
where it's being resumed.

177
00:08:39.586 --> 00:08:41.166 A:middle
The system gets it.

178
00:08:41.166 --> 00:08:43.645 A:middle
Your app gets launched,
and that's it.

179
00:08:43.936 --> 00:08:45.266 A:middle
Super simple to work with.

180
00:08:46.136 --> 00:08:50.386 A:middle
Now Handoff also has
two really cool features

181
00:08:50.386 --> 00:08:51.466 A:middle
that you can take advantage

182
00:08:51.466 --> 00:08:53.656 A:middle
of even beyond just
basic activities.

183
00:08:54.426 --> 00:08:58.906 A:middle
The first is the ability to
actually create live streams

184
00:08:59.116 --> 00:09:00.876 A:middle
between two different instances

185
00:09:00.876 --> 00:09:03.116 A:middle
of your app on different
devices.

186
00:09:03.626 --> 00:09:06.366 A:middle
So it's part of doing
that handoff

187
00:09:06.366 --> 00:09:07.936 A:middle
and resuming on another device.

188
00:09:08.676 --> 00:09:11.156 A:middle
You can actually have
that app connect back

189
00:09:11.326 --> 00:09:14.476 A:middle
to the original machine and
just get an open NS stream

190
00:09:14.476 --> 00:09:17.246 A:middle
on either side to be able to
keep talking back and forth.

191
00:09:17.246 --> 00:09:19.726 A:middle
So as you can imagine,
there's some pretty cool stuff

192
00:09:19.726 --> 00:09:21.576 A:middle
that you can do with that.

193
00:09:22.136 --> 00:09:24.366 A:middle
Now second, and I imagine
for some people in this room,

194
00:09:24.366 --> 00:09:27.986 A:middle
this will be a really big
deal, we support Handoff

195
00:09:27.986 --> 00:09:32.666 A:middle
between native apps that you
own and websites that you own.

196
00:09:33.386 --> 00:09:41.006 A:middle
So if you've got [applause]
-- so if you've got an iOS app

197
00:09:41.006 --> 00:09:42.966 A:middle
and a really great website,

198
00:09:43.356 --> 00:09:46.116 A:middle
you could actually handoff
seamlessly between the two,

199
00:09:46.646 --> 00:09:47.936 A:middle
so that's really, really, cool.

200
00:09:48.596 --> 00:09:49.176 A:middle
All right.

201
00:09:49.176 --> 00:09:51.126 A:middle
So now for today's
agenda, we're going to go

202
00:09:51.126 --> 00:09:52.086 A:middle
into a few things here.

203
00:09:52.086 --> 00:09:55.596 A:middle
We're going to take a look at
specifically AppKit and UIKit

204
00:09:55.596 --> 00:09:57.196 A:middle
as support for Handoff and what

205
00:09:57.196 --> 00:09:57.976 A:middle
that looks like, how
you adopt things.

206
00:10:00.066 --> 00:10:03.526 A:middle
We'll talk about working with
NSUserActivity directly just

207
00:10:03.526 --> 00:10:04.936 A:middle
so you can understand
the API there,

208
00:10:04.936 --> 00:10:06.556 A:middle
some more advanced
things that you can do.

209
00:10:07.216 --> 00:10:10.936 A:middle
We'll get into Native App to
website Handoff and also look

210
00:10:10.936 --> 00:10:14.836 A:middle
at using these continuation
streams between different apps.

211
00:10:15.396 --> 00:10:18.406 A:middle
And with that, I'd like to hand
it off to Vince Spader to talk

212
00:10:18.406 --> 00:10:20.526 A:middle
to you about adopting
Handoff in your app.

213
00:10:20.526 --> 00:10:20.896 A:middle
Thank you [applause].

214
00:10:26.966 --> 00:10:27.836 A:middle
&gt;&gt; Thank you Jerry.

215
00:10:28.166 --> 00:10:35.046 A:middle
So adopting Handoff in your
app, there are three key pieces

216
00:10:35.046 --> 00:10:38.316 A:middle
to the AppKit and UIKit
support in Handoff.

217
00:10:38.816 --> 00:10:45.056 A:middle
The first is creating these user
activities and advertising them

218
00:10:45.056 --> 00:10:46.356 A:middle
to your nearby devices.

219
00:10:47.046 --> 00:10:51.356 A:middle
The second is updating the
user activity with your state

220
00:10:51.356 --> 00:10:53.706 A:middle
about what the user
is doing in your app.

221
00:10:54.516 --> 00:10:57.076 A:middle
And the third is using that
information that you put

222
00:10:57.076 --> 00:11:02.806 A:middle
in to resume what the user
is doing on another device.

223
00:11:02.806 --> 00:11:05.646 A:middle
So starting at the beginning,
creating user activities.

224
00:11:06.196 --> 00:11:07.746 A:middle
The first step is to kind

225
00:11:07.746 --> 00:11:10.296 A:middle
of take a step back
before you write any code

226
00:11:10.576 --> 00:11:13.186 A:middle
and ask what do users
do in my app.

227
00:11:14.026 --> 00:11:16.366 A:middle
Hopefully this is a pretty
simple question to answer.

228
00:11:16.786 --> 00:11:19.586 A:middle
Here's an example from OS X.

229
00:11:19.586 --> 00:11:21.126 A:middle
What's the user doing here?

230
00:11:21.576 --> 00:11:23.746 A:middle
Well, they're composing
an email message.

231
00:11:24.216 --> 00:11:26.926 A:middle
Here's another example from iOS.

232
00:11:27.296 --> 00:11:28.136 A:middle
What are they doing?

233
00:11:28.856 --> 00:11:30.126 A:middle
Composing an email message.

234
00:11:30.126 --> 00:11:32.406 A:middle
It's the same activity
on a different device.

235
00:11:33.596 --> 00:11:35.926 A:middle
Some other examples of
activities would be things

236
00:11:35.926 --> 00:11:39.386 A:middle
like reading messages,
picking an item from a list

237
00:11:39.386 --> 00:11:40.566 A:middle
or editing a document.

238
00:11:40.776 --> 00:11:43.846 A:middle
These are fairly
continuous things

239
00:11:43.846 --> 00:11:46.836 A:middle
that the users engaged
in in your app.

240
00:11:48.046 --> 00:11:52.286 A:middle
Things like clicking a
button or typing the subject

241
00:11:52.286 --> 00:11:55.146 A:middle
of an email are not
really user activities.

242
00:11:55.146 --> 00:11:58.156 A:middle
Those are kind of parts
or actions that are part

243
00:11:58.156 --> 00:12:01.046 A:middle
of the user activity,
so they're fairly broad

244
00:12:01.046 --> 00:12:02.696 A:middle
and they're continuous.

245
00:12:03.206 --> 00:12:08.206 A:middle
So once you've identified
what your app is --

246
00:12:09.026 --> 00:12:11.536 A:middle
what users are doing
in your app,

247
00:12:11.536 --> 00:12:14.396 A:middle
you'll find that usually
there are some UI elements

248
00:12:14.796 --> 00:12:18.986 A:middle
that are responsible for
presenting that to the user.

249
00:12:19.576 --> 00:12:22.526 A:middle
Maybe it's a window
or a View Controller.

250
00:12:23.466 --> 00:12:30.586 A:middle
And on iOS8 and OS X Yosemite,
NSDocument, UI Document,

251
00:12:30.746 --> 00:12:35.256 A:middle
NSResponder and UIResponder
have a user activity property.

252
00:12:35.886 --> 00:12:39.796 A:middle
And remember that
Responder is a base class

253
00:12:39.796 --> 00:12:41.536 A:middle
for a lot of UI elements.

254
00:12:41.536 --> 00:12:46.036 A:middle
It includes views, windows, view
controllers, window controllers,

255
00:12:46.036 --> 00:12:49.266 A:middle
so odds are good
if it's in your UI,

256
00:12:49.266 --> 00:12:50.816 A:middle
it has the user activity
property.

257
00:12:51.776 --> 00:12:54.176 A:middle
And you use it kind
of like this.

258
00:12:54.426 --> 00:12:58.136 A:middle
So the first step is to create
an NSuserActivity instance

259
00:12:58.646 --> 00:13:00.766 A:middle
and you do that with
[Inaudible] ActivityType.

260
00:13:00.766 --> 00:13:05.556 A:middle
And you're passing it in
ActivityType, which is a string

261
00:13:05.556 --> 00:13:10.536 A:middle
that identifies the kind
of activity that this is.

262
00:13:11.256 --> 00:13:13.796 A:middle
It will also appear
in your info key list,

263
00:13:13.796 --> 00:13:16.216 A:middle
and we'll talk a little
bit more about that later.

264
00:13:16.886 --> 00:13:21.016 A:middle
So after you have the
NSUserActivity instance,

265
00:13:21.016 --> 00:13:22.196 A:middle
you can configure it.

266
00:13:22.456 --> 00:13:24.506 A:middle
It has some properties
like a title.

267
00:13:25.236 --> 00:13:28.396 A:middle
And then you set it on your
document or responder just

268
00:13:28.396 --> 00:13:30.466 A:middle
like any other property.

269
00:13:32.696 --> 00:13:36.226 A:middle
So for document-based
apps, it's even easier.

270
00:13:36.676 --> 00:13:39.466 A:middle
All you need to do
is add NSUbiquitous

271
00:13:39.466 --> 00:13:44.086 A:middle
DocumentUserActivity
Type to your info P list

272
00:13:44.086 --> 00:13:46.736 A:middle
under each CFBundleDocumentTypes
entry.

273
00:13:47.226 --> 00:13:51.096 A:middle
The basic idea is you're giving
us an activity type for each

274
00:13:51.096 --> 00:13:53.776 A:middle
of your document types
and it's perfectly okay

275
00:13:53.776 --> 00:13:57.266 A:middle
to have the same activity type
for multiple document types.

276
00:13:58.276 --> 00:14:03.096 A:middle
And when that is
in your INFOP list,

277
00:14:03.096 --> 00:14:07.006 A:middle
we will automatically create
the NSUserActivity and set it

278
00:14:07.006 --> 00:14:12.456 A:middle
on your document when the
document is in iCloud.

279
00:14:12.816 --> 00:14:16.496 A:middle
On OS X, since NSDocument can
move out of iCloud and back

280
00:14:16.496 --> 00:14:20.766 A:middle
into iCloud, we will be
updating that user activity

281
00:14:20.766 --> 00:14:23.636 A:middle
when that happens, so we
will set the property to nil

282
00:14:23.636 --> 00:14:25.626 A:middle
for example, when it
moves out of iCloud

283
00:14:25.766 --> 00:14:29.386 A:middle
and then create a new one if
it gets moved into iCloud.

284
00:14:29.386 --> 00:14:32.156 A:middle
And if you want to
know that is happening,

285
00:14:32.156 --> 00:14:35.116 A:middle
if you're using the UserActivity
and sharing it maybe,

286
00:14:35.936 --> 00:14:40.216 A:middle
you can use KVO and just
observe the UserActivityKey

287
00:14:40.216 --> 00:14:43.226 A:middle
on the document.

288
00:14:43.226 --> 00:14:47.156 A:middle
So for other apps that are not
document based, you still need

289
00:14:47.156 --> 00:14:49.486 A:middle
to put your activity
types in the INFOP list,

290
00:14:49.586 --> 00:14:52.616 A:middle
but it goes under this
NSUserActivity Types array

291
00:14:52.866 --> 00:14:54.106 A:middle
that's at the top level.

292
00:14:54.336 --> 00:14:56.986 A:middle
And again, we'll talk more
about activity types later.

293
00:14:57.446 --> 00:14:58.866 A:middle
For documents and responders,

294
00:14:59.296 --> 00:15:04.646 A:middle
when they have a UserActivity
property set on their document

295
00:15:04.646 --> 00:15:07.846 A:middle
or responder, AppKit and
UIKit will manage it for you.

296
00:15:09.136 --> 00:15:11.786 A:middle
What this means is We
call becomeCurrent,

297
00:15:12.436 --> 00:15:15.846 A:middle
and becomeCurrent is a
method on NSUserActivity

298
00:15:16.266 --> 00:15:20.196 A:middle
that makes the NSUserActivity
the one user activity,

299
00:15:20.196 --> 00:15:23.116 A:middle
the current user activity
that the users engaged in

300
00:15:23.426 --> 00:15:26.566 A:middle
and it gets advertised to all
of your nearby applications.

301
00:15:27.856 --> 00:15:30.486 A:middle
So here's what this
kind of looks like.

302
00:15:31.076 --> 00:15:33.756 A:middle
So the iPhone has
an NSUserActivity

303
00:15:34.276 --> 00:15:39.436 A:middle
and become Current gets called
on it, and that gets advertised

304
00:15:39.436 --> 00:15:41.846 A:middle
to all of your nearby
devices, and they show

305
00:15:41.846 --> 00:15:45.866 A:middle
up in the Lock screen, or
the DOC, or what have you.

306
00:15:46.086 --> 00:15:52.266 A:middle
So becomeCurrent, you can
call it yourself, but AppKit

307
00:15:52.266 --> 00:15:55.356 A:middle
and UIKit will also call
it at some key points,

308
00:15:55.846 --> 00:15:59.016 A:middle
so you probably don't have to.

309
00:15:59.606 --> 00:16:02.366 A:middle
On iOS, this means that
when your app is launched,

310
00:16:02.716 --> 00:16:05.166 A:middle
comes into the foreground
or tabs are switched,

311
00:16:05.986 --> 00:16:10.266 A:middle
UIKit will walk the View
Controller hierarchy including

312
00:16:10.266 --> 00:16:13.566 A:middle
presented view controllers,
and we're only looking

313
00:16:13.566 --> 00:16:15.916 A:middle
at view controllers that
have views which are

314
00:16:15.916 --> 00:16:17.526 A:middle
in the view hierarchy.

315
00:16:17.986 --> 00:16:20.276 A:middle
And if those -- if we
find a View Controller

316
00:16:20.276 --> 00:16:24.216 A:middle
that has a user activity,
that's the current user activity

317
00:16:24.216 --> 00:16:26.206 A:middle
and we call becomeCurrent on it.

318
00:16:26.956 --> 00:16:30.586 A:middle
Additionally, when
userActivity is set initially

319
00:16:30.586 --> 00:16:33.606 A:middle
on UI View Controller,
if the View Controller's

320
00:16:33.606 --> 00:16:35.986 A:middle
in a transition, will
wait until it's finished,

321
00:16:37.046 --> 00:16:39.936 A:middle
but if the View Controller's
views in the window hierarchy,

322
00:16:40.416 --> 00:16:43.936 A:middle
we will automatically
becomeCurrent on it immediately.

323
00:16:44.526 --> 00:16:47.516 A:middle
So that's UI View Controller.

324
00:16:47.516 --> 00:16:50.916 A:middle
UI Document will not become
current automatically,

325
00:16:51.836 --> 00:16:54.326 A:middle
but it's really easy
to share it with a --

326
00:16:54.326 --> 00:16:56.916 A:middle
share your user activity with
a View Controller that will.

327
00:16:57.406 --> 00:17:00.206 A:middle
All you need to do is set the
View Controller's User Activity

328
00:17:00.206 --> 00:17:03.096 A:middle
to that document's User
Activity and whenever

329
00:17:03.096 --> 00:17:06.576 A:middle
that View Controller is
found according to the rules

330
00:17:06.576 --> 00:17:09.175 A:middle
in the previous slide,
it will become current.

331
00:17:09.175 --> 00:17:13.726 A:middle
On OS X, it's a little
bit different.

332
00:17:14.786 --> 00:17:19.306 A:middle
AppKit looks for a
userActivity in two places.

333
00:17:19.935 --> 00:17:23.316 A:middle
The first is the main
windows responder chain.

334
00:17:23.736 --> 00:17:26.425 A:middle
We go -- we start at the
first responder and go

335
00:17:26.425 --> 00:17:28.686 A:middle
through the next
responders looking for one

336
00:17:28.686 --> 00:17:31.766 A:middle
with a user activity
set, and if we find it,

337
00:17:31.766 --> 00:17:32.936 A:middle
that's the current activity

338
00:17:32.936 --> 00:17:35.116 A:middle
and we call becomeCurrent
on that userActivity.

339
00:17:35.746 --> 00:17:39.526 A:middle
And we'll also look at the main
window controller's document,

340
00:17:40.966 --> 00:17:42.476 A:middle
and if it has a User Activity,

341
00:17:42.506 --> 00:17:44.686 A:middle
we'll call becomeCurrent
on that.

342
00:17:45.016 --> 00:17:47.726 A:middle
And we will also reevaluate
this when appropriate

343
00:17:47.726 --> 00:17:51.016 A:middle
as the main window changes or
the user activity gets set.

344
00:17:51.446 --> 00:17:53.726 A:middle
We'll do this search
and find the right thing

345
00:17:53.726 --> 00:17:57.466 A:middle
to become current on.

346
00:17:57.726 --> 00:17:59.456 A:middle
So we manage it for you.

347
00:17:59.566 --> 00:18:00.906 A:middle
We call becomeCurrent.

348
00:18:02.056 --> 00:18:07.236 A:middle
We will also call Invalidate
and Invalidate is a method also

349
00:18:07.236 --> 00:18:11.496 A:middle
on NSUserActivity, which means
that this activity is finished.

350
00:18:11.916 --> 00:18:13.226 A:middle
The user's done with it.

351
00:18:13.376 --> 00:18:14.496 A:middle
They put it away.

352
00:18:14.876 --> 00:18:18.466 A:middle
They're no longer doing
what they were doing.

353
00:18:19.476 --> 00:18:21.996 A:middle
So that looks something
kind of like this.

354
00:18:22.066 --> 00:18:23.636 A:middle
So the same set up as before.

355
00:18:23.636 --> 00:18:27.566 A:middle
The iPhone has the current
activity that's being advertised

356
00:18:27.566 --> 00:18:31.456 A:middle
to your nearby devices,
and Invalidate gets called

357
00:18:31.566 --> 00:18:34.176 A:middle
and it stops viewing
the current activity

358
00:18:34.246 --> 00:18:36.446 A:middle
so the user can't
continue it anymore.

359
00:18:36.846 --> 00:18:38.076 A:middle
They've closed the window.

360
00:18:38.076 --> 00:18:38.816 A:middle
It's finished.

361
00:18:39.166 --> 00:18:39.566 A:middle
It's done.

362
00:18:40.186 --> 00:18:43.396 A:middle
So that's creating
user activities

363
00:18:43.396 --> 00:18:49.266 A:middle
and letting your nearby devices
know what the user is doing.

364
00:18:50.536 --> 00:18:53.936 A:middle
The next step is
putting your information

365
00:18:54.386 --> 00:18:58.626 A:middle
into the UserActivity to let --

366
00:18:58.626 --> 00:19:03.746 A:middle
so that you can restore the
state when it gets continued.

367
00:19:04.966 --> 00:19:10.166 A:middle
So NSUserActivity has a userInfo
dictionary for this purpose.

368
00:19:10.166 --> 00:19:11.606 A:middle
It is yours to use.

369
00:19:13.466 --> 00:19:16.766 A:middle
You fill it out when
you get this call back,

370
00:19:16.766 --> 00:19:20.846 A:middle
so this is a method on
NSDocument, UIDocument

371
00:19:20.846 --> 00:19:26.036 A:middle
and the responders, update
UserActivityState, and you --

372
00:19:26.036 --> 00:19:30.946 A:middle
in this method, you fill out
the user activities user info

373
00:19:31.046 --> 00:19:35.896 A:middle
with the state of your responder
document and whatever you want

374
00:19:35.896 --> 00:19:38.126 A:middle
about what the user is doing.

375
00:19:38.726 --> 00:19:44.226 A:middle
Note that the userInfo is
emptied each time we make these

376
00:19:44.226 --> 00:19:49.056 A:middle
callbacks, so before
UpdateUserActivityState is

377
00:19:49.056 --> 00:19:50.616 A:middle
called on your documents
or responders,

378
00:19:50.616 --> 00:19:53.076 A:middle
we'll empty that out
on the userActivity.

379
00:19:55.096 --> 00:19:58.006 A:middle
So all you need to do
is add to the User Info.

380
00:19:58.006 --> 00:19:59.426 A:middle
You don't need to worry
about clearing out old data

381
00:19:59.426 --> 00:19:59.976 A:middle
or anything like that.

382
00:20:00.056 --> 00:20:04.546 A:middle
So it's looks something
kind of like this.

383
00:20:05.726 --> 00:20:07.456 A:middle
UpdateUserActivityState.

384
00:20:07.816 --> 00:20:09.226 A:middle
Don't forget to call Super.

385
00:20:09.876 --> 00:20:11.296 A:middle
There's a convenience method

386
00:20:11.296 --> 00:20:14.406 A:middle
on NSUserActivity called
UpdateUserInfoEntries

387
00:20:14.406 --> 00:20:16.966 A:middle
fromDictionary, and
that's a really easy way

388
00:20:16.966 --> 00:20:19.536 A:middle
to get your information
into the UserActivity.

389
00:20:20.146 --> 00:20:25.856 A:middle
And we will call this
at an appropriate time;

390
00:20:25.906 --> 00:20:28.896 A:middle
not necessarily when
the user continues,

391
00:20:29.106 --> 00:20:31.446 A:middle
but just at an appropriate
opportune time,

392
00:20:31.696 --> 00:20:33.586 A:middle
we will call this to
gather the information

393
00:20:33.586 --> 00:20:34.716 A:middle
about the user activity.

394
00:20:35.306 --> 00:20:38.106 A:middle
And when the info that you put

395
00:20:38.186 --> 00:20:40.526 A:middle
in the UserActivity
becomes stale,

396
00:20:41.176 --> 00:20:45.526 A:middle
there's a needs Save property on
NSUserActivity that's a Boolean

397
00:20:45.876 --> 00:20:48.136 A:middle
and all you need to
do is set that to yes

398
00:20:48.386 --> 00:20:51.326 A:middle
and we will call the
UpdateUserActivityState method

399
00:20:51.326 --> 00:20:52.596 A:middle
again later.

400
00:20:54.146 --> 00:20:55.926 A:middle
Set Need Save is very cheap.

401
00:20:55.926 --> 00:20:58.506 A:middle
You should call it
as your data changes

402
00:20:58.626 --> 00:21:01.026 A:middle
and we'll call you back later

403
00:21:01.096 --> 00:21:02.486 A:middle
with the
UpdateUserActivityState.

404
00:21:04.676 --> 00:21:07.716 A:middle
So what can you put
in the user info?

405
00:21:08.516 --> 00:21:12.576 A:middle
It's a dictionary and it
can store most POS types,

406
00:21:12.576 --> 00:21:16.396 A:middle
or all POS types and a few
others, including URL's.

407
00:21:17.116 --> 00:21:23.116 A:middle
And for URL's, file URL's are
obviously a little problematic.

408
00:21:23.116 --> 00:21:25.736 A:middle
The same path might point

409
00:21:25.736 --> 00:21:27.876 A:middle
to different places
on different devices.

410
00:21:27.876 --> 00:21:29.696 A:middle
The actual file might
not be there.

411
00:21:30.346 --> 00:21:34.606 A:middle
However, file URL's
in iCloud are okay,

412
00:21:35.026 --> 00:21:39.486 A:middle
and if you're iOS only, from a
document provider are okay too.

413
00:21:39.486 --> 00:21:42.636 A:middle
We will automatically
do some translation

414
00:21:42.716 --> 00:21:47.276 A:middle
so the file URL is
pointing to the right file.

415
00:21:49.296 --> 00:21:54.306 A:middle
Couple other things; keep the
minimal amount of information

416
00:21:54.306 --> 00:21:57.066 A:middle
in the userInfo, so
just put what you need

417
00:21:57.066 --> 00:21:59.416 A:middle
to get the user back
to where they are.

418
00:22:00.316 --> 00:22:03.186 A:middle
The transfer times for these
things can vary quite a lot,

419
00:22:03.186 --> 00:22:06.186 A:middle
so every byte really counts.

420
00:22:06.346 --> 00:22:07.606 A:middle
Just include the State.

421
00:22:08.066 --> 00:22:09.776 A:middle
So don't include your document.

422
00:22:10.436 --> 00:22:12.436 A:middle
If you're using iCloud,
fantastic.

423
00:22:12.436 --> 00:22:14.406 A:middle
All you need to do
is store the file URL

424
00:22:14.406 --> 00:22:17.596 A:middle
and then you can use that.

425
00:22:17.596 --> 00:22:21.766 A:middle
If your data is stored on the
web somewhere, put a reference

426
00:22:21.766 --> 00:22:22.826 A:middle
to that in your userInfo.

427
00:22:23.376 --> 00:22:27.366 A:middle
Also try to avoid
platform specifics.

428
00:22:27.506 --> 00:22:31.136 A:middle
Since this user activity
might be continued on a Mac,

429
00:22:31.136 --> 00:22:34.146 A:middle
or an iPad, or an iPhone,
there are a lot of things

430
00:22:34.146 --> 00:22:36.116 A:middle
like the visible rec
of a scroll view,

431
00:22:36.116 --> 00:22:39.926 A:middle
which don't really make sense
across all those contexts.

432
00:22:40.406 --> 00:22:44.336 A:middle
It's better to use a heuristic
like the middle item that is

433
00:22:44.336 --> 00:22:47.906 A:middle
in my scroll view and
storing or offset a reference

434
00:22:47.936 --> 00:22:52.276 A:middle
to that instead of
storing a visible rec

435
00:22:52.276 --> 00:22:57.226 A:middle
for each potential thing
you are continuing on.

436
00:22:57.496 --> 00:23:02.476 A:middle
Also, NS and UIDocument will
add their file URL automatically

437
00:23:02.576 --> 00:23:05.596 A:middle
in their UpdateUserActivityState
implementations

438
00:23:06.056 --> 00:23:08.726 A:middle
with the NSUserActivity
Document URL Key.

439
00:23:09.116 --> 00:23:11.846 A:middle
So you don't need to --
it'll already be there.

440
00:23:11.846 --> 00:23:13.506 A:middle
Don't repeat it.

441
00:23:15.076 --> 00:23:20.096 A:middle
A couple other things;
think about versioning.

442
00:23:21.746 --> 00:23:23.436 A:middle
You're going to want to
future proof your app

443
00:23:23.696 --> 00:23:25.226 A:middle
as you make new versions.

444
00:23:25.226 --> 00:23:28.606 A:middle
You're going to have changes
to your user activities,

445
00:23:29.486 --> 00:23:30.846 A:middle
so you might want
to do something

446
00:23:30.846 --> 00:23:33.916 A:middle
like include a version
in your userInfo.

447
00:23:34.946 --> 00:23:36.556 A:middle
It could be something like this,

448
00:23:37.706 --> 00:23:40.336 A:middle
and here we're actually
using the application

449
00:23:40.336 --> 00:23:45.296 A:middle
didUpdateUserActivity app
delegate method, which is called

450
00:23:45.296 --> 00:23:47.796 A:middle
after any of your
documents or responders get

451
00:23:47.796 --> 00:23:52.066 A:middle
that UpdateUserActivityState
called on them.

452
00:23:52.066 --> 00:23:55.656 A:middle
So this is actually a
really good debugging point.

453
00:23:55.656 --> 00:24:01.256 A:middle
If you want to know what's
exactly is in your userInfo,

454
00:24:01.516 --> 00:24:03.276 A:middle
set a break point
here and check it out

455
00:24:03.276 --> 00:24:07.916 A:middle
and it will tell
you what's in there.

456
00:24:08.106 --> 00:24:12.676 A:middle
So now we have put
our information

457
00:24:12.676 --> 00:24:16.376 A:middle
about what the user's doing
in the NSUserActivity.

458
00:24:17.446 --> 00:24:21.446 A:middle
The next step is using that
information on another device

459
00:24:21.746 --> 00:24:24.596 A:middle
to continue and get
the user right back

460
00:24:24.676 --> 00:24:27.316 A:middle
to what they were doing.

461
00:24:27.476 --> 00:24:32.456 A:middle
So again, this is on another
device, so your -- you --

462
00:24:32.456 --> 00:24:36.896 A:middle
the device has received an
advertisement that this user,

463
00:24:36.896 --> 00:24:39.736 A:middle
other user activity is
current on another device

464
00:24:39.976 --> 00:24:41.696 A:middle
and it's showing up
in the Lock Screen,

465
00:24:41.696 --> 00:24:42.886 A:middle
or the doc, or what have you.

466
00:24:43.516 --> 00:24:46.276 A:middle
And the user indicates
that they want

467
00:24:46.356 --> 00:24:48.876 A:middle
to continue your application,

468
00:24:49.486 --> 00:24:53.296 A:middle
and we will call this
on your app delegate.

469
00:24:53.506 --> 00:24:56.096 A:middle
Application will
ContinueUserActivityWithType

470
00:24:56.096 --> 00:25:01.436 A:middle
and note that there is
no NSUserActivity here.

471
00:25:01.946 --> 00:25:03.956 A:middle
All you have is the
activity type,

472
00:25:03.956 --> 00:25:06.426 A:middle
and that's because we
haven't actually fetched the

473
00:25:06.536 --> 00:25:09.656 A:middle
UserActivity completely yet.

474
00:25:10.216 --> 00:25:13.266 A:middle
We will start fetching
it immediately after --

475
00:25:13.396 --> 00:25:14.236 A:middle
when you get this call.

476
00:25:14.236 --> 00:25:20.486 A:middle
And you should use this to show
the user what's being continued.

477
00:25:20.486 --> 00:25:24.036 A:middle
You have the activity type so
you have an idea of what kind

478
00:25:24.036 --> 00:25:28.006 A:middle
of activity it is and maybe you
can animate a View Controller in

479
00:25:28.006 --> 00:25:32.296 A:middle
or something so the
weight is perceived less.

480
00:25:34.956 --> 00:25:38.856 A:middle
So you should return yes
if you're handling this

481
00:25:38.856 --> 00:25:41.986 A:middle
and you're showing some kind
of feedback to the user,

482
00:25:42.676 --> 00:25:45.506 A:middle
or return no, or if
it's not implemented

483
00:25:45.506 --> 00:25:47.216 A:middle
and you'll get the
systems behavior.

484
00:25:47.906 --> 00:25:50.466 A:middle
Now, on iOS, this
means the default ping,

485
00:25:51.106 --> 00:25:52.876 A:middle
but on OS X, you get nothing.

486
00:25:53.036 --> 00:25:55.866 A:middle
So it's a really good idea
to implement this if you can.

487
00:25:56.396 --> 00:26:00.786 A:middle
Here's an example of what
that might look like.

488
00:26:01.836 --> 00:26:04.776 A:middle
So as you can see, we're
checking the activity type

489
00:26:05.056 --> 00:26:07.806 A:middle
and if it's a viewing
message activity,

490
00:26:08.366 --> 00:26:11.586 A:middle
we know that we're going to
need a MessageViewController

491
00:26:12.016 --> 00:26:15.426 A:middle
and so we set that up and
we show it to the user,

492
00:26:16.086 --> 00:26:19.446 A:middle
and then we return yes because
we are handling showing feedback

493
00:26:19.446 --> 00:26:21.716 A:middle
to that user about
that activity type.

494
00:26:22.616 --> 00:26:28.346 A:middle
So once the user
activity has been fetched

495
00:26:28.346 --> 00:26:32.686 A:middle
from the other device, we will
reconstruct the NSUserActivity

496
00:26:32.686 --> 00:26:35.666 A:middle
and give it to you in
this app delegate method,

497
00:26:36.106 --> 00:26:39.356 A:middle
ApplicationContinue
UserActivity RestorationHandler.

498
00:26:40.156 --> 00:26:44.016 A:middle
And this is the place where you
reconstruct the user's activity.

499
00:26:44.016 --> 00:26:46.496 A:middle
You get them back to whatever
it was they were doing.

500
00:26:48.156 --> 00:26:52.826 A:middle
Again, return yes if you've
handled this user activity.

501
00:26:53.276 --> 00:26:55.686 A:middle
Return no or leave
it unimplemented

502
00:26:55.686 --> 00:27:02.076 A:middle
and we can continue some
user activities for you.

503
00:27:03.336 --> 00:27:10.326 A:middle
So this restorationHandler; it's
a block that we pass into you

504
00:27:10.496 --> 00:27:14.926 A:middle
and you call it and you give
it an array of documents

505
00:27:14.926 --> 00:27:17.906 A:middle
and responders that are
presenting the user activity,

506
00:27:18.466 --> 00:27:21.716 A:middle
and we'll call a method that's
RestoreUserActivityState

507
00:27:22.016 --> 00:27:24.416 A:middle
that is paired with that
UpdateUserActivityState

508
00:27:24.416 --> 00:27:24.956 A:middle
from before.

509
00:27:25.426 --> 00:27:28.936 A:middle
Here's an example of what
that might look like.

510
00:27:30.336 --> 00:27:31.906 A:middle
So we're checking
the activity type,

511
00:27:31.906 --> 00:27:33.696 A:middle
and it's a viewing
message activity,

512
00:27:34.166 --> 00:27:36.946 A:middle
so we get our
MessageViewController

513
00:27:37.046 --> 00:27:42.856 A:middle
and we return yes, and note
we are also calling the

514
00:27:42.896 --> 00:27:45.166 A:middle
restorationHandler with
the ViewController.

515
00:27:46.436 --> 00:27:47.576 A:middle
And when you do that,

516
00:27:48.476 --> 00:27:51.156 A:middle
RestoreUserActivityState
is getting called

517
00:27:51.156 --> 00:27:55.026 A:middle
on that ViewController and
you can use the information

518
00:27:55.026 --> 00:27:57.046 A:middle
in the user info to kind

519
00:27:57.046 --> 00:28:00.336 A:middle
of reconstruct whatever
it is the user was doing

520
00:28:00.536 --> 00:28:03.746 A:middle
but at a more local level, so
just for your ViewController.

521
00:28:04.686 --> 00:28:08.006 A:middle
You can also call this manually
as you can see at the bottom.

522
00:28:08.996 --> 00:28:12.066 A:middle
It's perfectly fine to call
RestoreUserActivityState

523
00:28:12.066 --> 00:28:14.936 A:middle
yourself, and that's
actually a useful pattern

524
00:28:15.046 --> 00:28:17.686 A:middle
to restore the UserState

525
00:28:17.686 --> 00:28:20.816 A:middle
and build your ViewController
hierarchy at the same time.

526
00:28:21.526 --> 00:28:25.696 A:middle
So that's if everything
goes well.

527
00:28:26.086 --> 00:28:28.906 A:middle
It's entirely possible
since there are bits flying

528
00:28:28.906 --> 00:28:32.836 A:middle
through the air that some
might collide and will fail

529
00:28:32.836 --> 00:28:34.856 A:middle
to retrieve the UserActivity
information

530
00:28:34.856 --> 00:28:35.976 A:middle
from the other device.

531
00:28:36.766 --> 00:28:38.886 A:middle
And if there was an
error, we will call this

532
00:28:38.886 --> 00:28:39.756 A:middle
on your app delegate;

533
00:28:40.096 --> 00:28:43.726 A:middle
applicationdid FailToContinue
UserActivity with type error.

534
00:28:44.516 --> 00:28:47.596 A:middle
And you should present
the error to the user

535
00:28:47.596 --> 00:28:50.996 A:middle
and do whatever clean
up you need to do here.

536
00:28:51.976 --> 00:28:55.436 A:middle
We make a guarantee
that for every time

537
00:28:55.436 --> 00:28:57.856 A:middle
that you get
WillContinueActivity,

538
00:28:58.316 --> 00:29:02.356 A:middle
you will get exactly one of
either ContinueUserActivity

539
00:29:02.356 --> 00:29:06.916 A:middle
or DidFailToContinueuserActivity
so you can rely on that.

540
00:29:07.146 --> 00:29:08.076 A:middle
We'll pair those.

541
00:29:09.536 --> 00:29:14.486 A:middle
Also take note that the error
can be NSUserCancelledError,

542
00:29:14.936 --> 00:29:19.156 A:middle
in which case you probably don't
want to bug the user about it.

543
00:29:20.616 --> 00:29:23.366 A:middle
Usually that will
happen if the user tries

544
00:29:23.366 --> 00:29:26.736 A:middle
to continue something while
we're still fetching information

545
00:29:26.736 --> 00:29:28.256 A:middle
about a previous activity.

546
00:29:28.256 --> 00:29:30.536 A:middle
We'll automatically cancel
that previous activity.

547
00:29:33.576 --> 00:29:40.486 A:middle
So that's all you need, but
for document based apps on iOS,

548
00:29:40.856 --> 00:29:43.416 A:middle
you continue the
UserActivity kind of like this.

549
00:29:44.236 --> 00:29:47.556 A:middle
So you want to get the URL
out of the user info using

550
00:29:47.556 --> 00:29:50.096 A:middle
that NSUserActivity
Document URL key

551
00:29:50.946 --> 00:29:54.306 A:middle
and create your Write
UI document subclass.

552
00:29:55.366 --> 00:29:57.986 A:middle
And then you can pass it
to the restorationHandler

553
00:29:57.986 --> 00:30:00.466 A:middle
and that UI document will get
its RestoreUserActivityState

554
00:30:00.496 --> 00:30:00.976 A:middle
method called on it.

555
00:30:01.336 --> 00:30:03.746 A:middle
So it's pretty easy.

556
00:30:03.746 --> 00:30:08.956 A:middle
On OS X, AppKit can use
NSDocumentController

557
00:30:08.956 --> 00:30:10.056 A:middle
to do this for you.

558
00:30:10.416 --> 00:30:13.786 A:middle
So it will automatically
get out the file URL,

559
00:30:13.786 --> 00:30:18.196 A:middle
find the right document subclass
to create and create it.

560
00:30:18.686 --> 00:30:22.726 A:middle
And then we will pass -- we will
call RestoreUserActivityState

561
00:30:22.726 --> 00:30:24.926 A:middle
and give you the
user activity object

562
00:30:25.266 --> 00:30:27.966 A:middle
so you can restore
the UserState.

563
00:30:28.926 --> 00:30:34.436 A:middle
Here's the diagram to kind of go
through this continuing process.

564
00:30:35.126 --> 00:30:36.576 A:middle
So it's similar to before.

565
00:30:36.576 --> 00:30:39.426 A:middle
The iPhone has advertised
a User Activity

566
00:30:39.936 --> 00:30:43.206 A:middle
and the user is continuing
on their Mac.

567
00:30:44.176 --> 00:30:46.706 A:middle
And when the user indicates
they want to continue,

568
00:30:46.886 --> 00:30:49.866 A:middle
we will call ApplicationWill
ContinueUser Activity

569
00:30:49.866 --> 00:30:51.366 A:middle
with type under App Delegate.

570
00:30:52.776 --> 00:30:56.426 A:middle
And you've implemented it to
give the user some feedback

571
00:30:56.576 --> 00:30:58.466 A:middle
that it's being continued.

572
00:30:59.096 --> 00:31:02.256 A:middle
Maybe you've animated in a
ViewController or something

573
00:31:02.256 --> 00:31:05.556 A:middle
so that by the time we
actually get the activity,

574
00:31:05.606 --> 00:31:07.246 A:middle
maybe the animation
is still happening

575
00:31:07.246 --> 00:31:13.386 A:middle
and the user doesn't
even have to wait.

576
00:31:13.386 --> 00:31:18.016 A:middle
So we will then ask the
device we're continuing

577
00:31:18.016 --> 00:31:20.936 A:middle
from for the information
about the User Activity

578
00:31:21.416 --> 00:31:25.646 A:middle
and we'll get it back, and we'll
recreate the NSUserActivity

579
00:31:25.646 --> 00:31:27.386 A:middle
instance and pass it to you

580
00:31:27.386 --> 00:31:31.096 A:middle
in applicationcontinue
UserActivity restorationHandler.

581
00:31:33.916 --> 00:31:39.106 A:middle
In that method, you use the
information in the User Activity

582
00:31:39.106 --> 00:31:42.456 A:middle
to get the user back to
whatever it was they were doing.

583
00:31:43.366 --> 00:31:46.156 A:middle
This might include
passing some things

584
00:31:46.156 --> 00:31:49.386 A:middle
into the restorationHandler
and if you do that,

585
00:31:50.696 --> 00:31:53.336 A:middle
we will call
RestoreUserActivityState

586
00:31:53.336 --> 00:31:55.146 A:middle
on them.

587
00:31:55.336 --> 00:31:58.186 A:middle
And then the user's right
where they left off.

588
00:31:58.656 --> 00:32:03.086 A:middle
You've created UserActivity on
one device, put your information

589
00:32:03.086 --> 00:32:06.376 A:middle
about what the user is doing
into the NSUserActivity Object

590
00:32:07.246 --> 00:32:10.476 A:middle
and handed it off to another
device that is able to continue

591
00:32:10.476 --> 00:32:15.276 A:middle
and get the user back to
whatever it is they were doing.

592
00:32:15.426 --> 00:32:19.686 A:middle
So there's still a few more
details about NSUserActivity,

593
00:32:19.776 --> 00:32:21.786 A:middle
and there's a couple
other really cool things

594
00:32:21.786 --> 00:32:23.866 A:middle
that NSUserActivity can do,

595
00:32:24.046 --> 00:32:26.346 A:middle
and Keith Stattenfield will
be explaining them [applause].

596
00:32:27.026 --> 00:32:31.786 A:middle
&gt;&gt; Thank you very much.

597
00:32:31.786 --> 00:32:32.636 A:middle
It's exciting to be here

598
00:32:32.636 --> 00:32:35.506 A:middle
and show you what we've
been working on for a while.

599
00:32:35.506 --> 00:32:38.166 A:middle
And as Vince said, I'm going
to explain a little more

600
00:32:38.166 --> 00:32:40.906 A:middle
about how you might use this.

601
00:32:42.206 --> 00:32:44.036 A:middle
You've already seen
almost everything that's

602
00:32:44.126 --> 00:32:47.246 A:middle
in NSUserActivity by this point.

603
00:32:47.796 --> 00:32:51.296 A:middle
And AppKit and UIKit provide
a lot of functionality

604
00:32:51.296 --> 00:32:52.926 A:middle
that makes it really
easy to adopt this.

605
00:32:53.706 --> 00:32:55.216 A:middle
But if you have some need

606
00:32:55.216 --> 00:32:59.126 A:middle
to do something that's a
little outside the norm,

607
00:32:59.496 --> 00:33:03.106 A:middle
it's useful to understand at
the base of things what's there

608
00:33:03.436 --> 00:33:05.906 A:middle
and what you can do with things.

609
00:33:06.396 --> 00:33:10.216 A:middle
Jerry originally said, and
Vince pointed out you know,

610
00:33:10.216 --> 00:33:12.676 A:middle
NSUserActivities are just
objects that are alloc inited,

611
00:33:13.296 --> 00:33:15.486 A:middle
and we've talked about
this activity type string a

612
00:33:15.486 --> 00:33:16.166 A:middle
couple times.

613
00:33:16.776 --> 00:33:18.086 A:middle
So let's go into
that a little more.

614
00:33:18.976 --> 00:33:21.526 A:middle
You create one of these
UserActivity type strings

615
00:33:21.526 --> 00:33:27.186 A:middle
on your application and you
pass it to the Alloc init

616
00:33:27.186 --> 00:33:30.056 A:middle
or you've put it in
your CF bundle types

617
00:33:30.056 --> 00:33:31.986 A:middle
in the NS ubiquitous
document types key.

618
00:33:32.206 --> 00:33:34.196 A:middle
And where did you
get this string from?

619
00:33:34.196 --> 00:33:37.026 A:middle
In a sense, you just made it up.

620
00:33:37.246 --> 00:33:40.366 A:middle
That string is a string
that we as a system use

621
00:33:40.946 --> 00:33:43.436 A:middle
when an activity gets
received in a device,

622
00:33:44.396 --> 00:33:48.756 A:middle
to pick the application that
we want to show to the user.

623
00:33:49.456 --> 00:33:54.146 A:middle
And so in that sense, it's a
lot like a file type extension.

624
00:33:54.456 --> 00:33:58.236 A:middle
You know files have extensions
and those extensions bind them

625
00:33:58.236 --> 00:34:00.076 A:middle
to particular documents
when they're double clicked

626
00:34:00.076 --> 00:34:02.186 A:middle
on or otherwise opened.

627
00:34:02.186 --> 00:34:04.096 A:middle
UserActivity type strings
are the same thing.

628
00:34:04.666 --> 00:34:06.406 A:middle
You make them up.

629
00:34:06.406 --> 00:34:08.806 A:middle
We don't display them to
users so they don't need

630
00:34:08.806 --> 00:34:14.656 A:middle
to be terribly comprehensible,
and we recommend that you start

631
00:34:14.656 --> 00:34:16.606 A:middle
with the base of
your developer ID

632
00:34:17.025 --> 00:34:21.815 A:middle
or your company's reversed DNS
name, and then add some suffix

633
00:34:21.815 --> 00:34:23.626 A:middle
to the end of that
to make it unique,

634
00:34:23.916 --> 00:34:25.956 A:middle
one for each extension
type that you have.

635
00:34:25.956 --> 00:34:30.216 A:middle
And then once you pick those,
you put them in your code

636
00:34:30.216 --> 00:34:32.166 A:middle
at the point you'll be
creating each of those types

637
00:34:32.166 --> 00:34:35.255 A:middle
of activities, and you would
put them in your Info P lists

638
00:34:35.366 --> 00:34:38.255 A:middle
so that we know that
your application would

639
00:34:38.255 --> 00:34:39.966 A:middle
like to handle these
types of activities.

640
00:34:39.966 --> 00:34:43.585 A:middle
In your Info P lists, they
go in one of two places.

641
00:34:43.696 --> 00:34:47.496 A:middle
They either go in the
CFBundleDocument Types array

642
00:34:47.496 --> 00:34:52.936 A:middle
as the NSUbiquitousDocument
userActivity type,

643
00:34:53.255 --> 00:34:57.246 A:middle
or they go as a string in the
NSUserActivityTypes at the top

644
00:34:57.246 --> 00:35:01.936 A:middle
of your applications'
Info P list.

645
00:35:02.486 --> 00:35:05.746 A:middle
We've talked about
how they're used

646
00:35:05.746 --> 00:35:07.786 A:middle
to pick the application
that's shown in the corner.

647
00:35:08.466 --> 00:35:12.536 A:middle
We allow all of the applications
from a single developer

648
00:35:12.536 --> 00:35:15.736 A:middle
to exchange activities
amongst themselves.

649
00:35:16.486 --> 00:35:19.446 A:middle
So if you have an
iOS application

650
00:35:19.446 --> 00:35:23.206 A:middle
and an OS X application,
you can exchange activities

651
00:35:23.206 --> 00:35:23.706 A:middle
between them.

652
00:35:24.026 --> 00:35:27.536 A:middle
If you have several
iOS applications,

653
00:35:28.246 --> 00:35:30.556 A:middle
each of your applications
could create activities

654
00:35:30.556 --> 00:35:35.146 A:middle
that were continuable in your
other iOS or OS X applications.

655
00:35:36.116 --> 00:35:39.946 A:middle
We do this based on the
Team Identifier that's used

656
00:35:39.946 --> 00:35:41.716 A:middle
in the way you've
built your application.

657
00:35:42.306 --> 00:35:46.956 A:middle
That means in order to use
Continuity to continue an item;

658
00:35:46.956 --> 00:35:49.486 A:middle
you either need to be an
application in the App Store

659
00:35:49.786 --> 00:35:52.316 A:middle
or you need to be assigned
a developer certificate.

660
00:35:53.686 --> 00:35:57.716 A:middle
Now applications don't
have to claim all

661
00:35:57.716 --> 00:36:01.476 A:middle
of the activity types they
create, and the corollary,

662
00:36:01.616 --> 00:36:04.686 A:middle
applications can
claim activity types

663
00:36:04.686 --> 00:36:06.906 A:middle
that they themselves
don't create.

664
00:36:06.906 --> 00:36:12.346 A:middle
And as an example, if you have
kind of a monolithic application

665
00:36:12.346 --> 00:36:15.106 A:middle
on OS X, say it's an application

666
00:36:15.106 --> 00:36:17.686 A:middle
that creates many different
types of things for the user

667
00:36:17.686 --> 00:36:19.356 A:middle
from the user's perspective.

668
00:36:19.416 --> 00:36:21.856 A:middle
The user can edit
pictures of cats.

669
00:36:22.506 --> 00:36:25.896 A:middle
The users can add queue
to videos about cats.

670
00:36:26.496 --> 00:36:30.856 A:middle
Users can keep all of their cat
books, or all of their pictures

671
00:36:30.856 --> 00:36:32.686 A:middle
of their cats in
their one application.

672
00:36:33.606 --> 00:36:36.566 A:middle
You'd have that as
an application.

673
00:36:36.566 --> 00:36:38.626 A:middle
It would have a bunch of
different document types.

674
00:36:38.626 --> 00:36:41.316 A:middle
When you're creating
activities, you know,

675
00:36:41.386 --> 00:36:43.476 A:middle
there are different activities
a user might be doing.

676
00:36:44.266 --> 00:36:47.286 A:middle
But on iOS, you might have
three separate applications.

677
00:36:47.726 --> 00:36:50.206 A:middle
You might have one
application where the user looks

678
00:36:50.206 --> 00:36:53.406 A:middle
at their cat movies or
plays their cat sounds.

679
00:36:53.406 --> 00:36:55.886 A:middle
You might have a different
application for their cat books.

680
00:36:56.216 --> 00:36:57.836 A:middle
You might have a
third application

681
00:36:57.836 --> 00:36:59.876 A:middle
where they can see
their cute cat pictures

682
00:37:00.356 --> 00:37:02.376 A:middle
with the cute cat captions
on the bottom of them.

683
00:37:02.856 --> 00:37:05.856 A:middle
And when you built your
applications this way,

684
00:37:06.346 --> 00:37:09.946 A:middle
you would create four different
activity types; one that kind

685
00:37:09.946 --> 00:37:11.596 A:middle
of mapped to each
of your file types

686
00:37:11.596 --> 00:37:14.566 A:middle
and then your iOS
application in this case,

687
00:37:14.566 --> 00:37:17.116 A:middle
one of your applications
would claim two types

688
00:37:17.586 --> 00:37:19.796 A:middle
and your other applications
would claim other types.

689
00:37:20.536 --> 00:37:24.306 A:middle
And if a user continued
from OS X to iOS,

690
00:37:24.306 --> 00:37:26.666 A:middle
the appropriate icon would show
in the corner when they went

691
00:37:26.666 --> 00:37:29.856 A:middle
to continue from iOS back to
OS X, they would all come back

692
00:37:29.856 --> 00:37:34.416 A:middle
to your same monolithic
application.

693
00:37:34.416 --> 00:37:37.356 A:middle
Likewise, we've talked about
the NSUserActivity Object,

694
00:37:37.356 --> 00:37:41.116 A:middle
and it actually doesn't have a
lot that you need to set in it.

695
00:37:41.326 --> 00:37:44.236 A:middle
Activities have a
title, which you can set.

696
00:37:44.236 --> 00:37:47.706 A:middle
Keep it short just in case
it gets shown to the user

697
00:37:47.706 --> 00:37:48.506 A:middle
to know what they're doing.

698
00:37:48.506 --> 00:37:53.866 A:middle
They also have this User Info
Dictionary that anything you set

699
00:37:53.866 --> 00:37:57.156 A:middle
in there, the machine that
creates an activity is going

700
00:37:57.156 --> 00:37:59.336 A:middle
to show up in there and the
machine that receives it,

701
00:37:59.626 --> 00:38:05.316 A:middle
with minimal translation only of
URL's to point objects that are

702
00:38:05.316 --> 00:38:09.946 A:middle
in Cloud containers to
the same logical object,

703
00:38:10.596 --> 00:38:11.746 A:middle
the receiving device.

704
00:38:12.376 --> 00:38:16.626 A:middle
We do have the AddUser
ActivityEntries FromDictionary

705
00:38:16.626 --> 00:38:19.786 A:middle
to efficiently merge some
additional information

706
00:38:19.786 --> 00:38:20.486 A:middle
to the dictionary.

707
00:38:20.866 --> 00:38:22.596 A:middle
If you just set the user info,

708
00:38:22.596 --> 00:38:24.956 A:middle
then you're saying this is
exactly the user info I want

709
00:38:24.956 --> 00:38:25.346 A:middle
to be there.

710
00:38:26.146 --> 00:38:29.996 A:middle
After you've created an
activity, you or AppKit

711
00:38:29.996 --> 00:38:32.556 A:middle
or UIKit will call
becomeCurrent on it.

712
00:38:32.556 --> 00:38:34.866 A:middle
System then knows
this is the activity

713
00:38:34.866 --> 00:38:37.856 A:middle
that we should be sending out
that a user could continue

714
00:38:37.856 --> 00:38:41.866 A:middle
on another device, if your
application was the application

715
00:38:41.866 --> 00:38:45.796 A:middle
that the user was using
at that point in time,

716
00:38:45.796 --> 00:38:48.296 A:middle
and in the far future, you
would call ActivityInvalidate

717
00:38:48.296 --> 00:38:49.876 A:middle
to say we are done
with this activity.

718
00:38:49.876 --> 00:38:53.856 A:middle
The user has closed the document
or it's no longer appropriate.

719
00:38:54.146 --> 00:38:55.816 A:middle
It'll get removed
from other devices

720
00:38:56.356 --> 00:38:58.386 A:middle
and that you would
just de-allocate.

721
00:38:59.876 --> 00:39:02.256 A:middle
There are a few Delegate
calls as well

722
00:39:02.256 --> 00:39:04.126 A:middle
that you can take advantage of.

723
00:39:04.126 --> 00:39:07.046 A:middle
So if you set a delegate on
an NSUserActivity Object,

724
00:39:07.656 --> 00:39:11.496 A:middle
when we've decided that
we need the information

725
00:39:11.636 --> 00:39:12.966 A:middle
from your ActivityObject,

726
00:39:13.616 --> 00:39:16.136 A:middle
if you have implemented
UserActivity WillSave,

727
00:39:16.136 --> 00:39:21.006 A:middle
we will call that delegate
on a default priority cue

728
00:39:21.006 --> 00:39:24.846 A:middle
to give you one last chance
to fill in the user info

729
00:39:24.846 --> 00:39:28.476 A:middle
with whatever you think is
the correct info right now.

730
00:39:29.236 --> 00:39:33.336 A:middle
And that means the model
you should adopt is instead

731
00:39:33.336 --> 00:39:36.286 A:middle
of constantly trying to
set user info you know,

732
00:39:36.286 --> 00:39:39.566 A:middle
after every keystroke, if
the user is typing something

733
00:39:39.566 --> 00:39:43.016 A:middle
on one device, you should
set the NeedSaveProperty

734
00:39:43.016 --> 00:39:46.516 A:middle
of the user activity whenever
the user does anything

735
00:39:46.516 --> 00:39:48.666 A:middle
that would essentially
dirty the object

736
00:39:48.856 --> 00:39:53.006 A:middle
from the last time you told
us that here's an activity

737
00:39:53.486 --> 00:39:55.526 A:middle
and the last time we
asked you to fill it in.

738
00:39:55.926 --> 00:39:57.336 A:middle
And at some time in the future,

739
00:39:57.336 --> 00:40:01.506 A:middle
we will call you via this
userActivityWillSave,

740
00:40:01.506 --> 00:40:05.286 A:middle
or in the UIKit and
AppKit delegates above us,

741
00:40:05.286 --> 00:40:06.646 A:middle
and we'll ask you okay,

742
00:40:06.746 --> 00:40:08.966 A:middle
now we actually need the
information for this activity

743
00:40:09.686 --> 00:40:11.326 A:middle
Perhaps it's being
sent to another device

744
00:40:11.326 --> 00:40:13.096 A:middle
because the user is
actually continuing it.

745
00:40:13.096 --> 00:40:16.096 A:middle
There are other reasons
that we sometimes ask you

746
00:40:16.096 --> 00:40:19.286 A:middle
to give us the info, and
that's your opportunity.

747
00:40:19.696 --> 00:40:22.186 A:middle
Fill in the user info
and when that returns,

748
00:40:22.186 --> 00:40:25.716 A:middle
we know that you've given us a
consistent set of information.

749
00:40:26.356 --> 00:40:31.026 A:middle
We have another delegate
which lets you know

750
00:40:31.026 --> 00:40:33.676 A:middle
that the activity was
continued onto another device.

751
00:40:34.086 --> 00:40:37.616 A:middle
When the user does
this, we will call

752
00:40:37.616 --> 00:40:40.616 A:middle
on the first device
userActivityWasContinued,

753
00:40:41.066 --> 00:40:43.266 A:middle
give you back your
UserActivityObject.

754
00:40:44.016 --> 00:40:46.716 A:middle
Many of you probably
won't need this.

755
00:40:46.766 --> 00:40:50.616 A:middle
We're hoping that you structure
your activities so that even

756
00:40:50.616 --> 00:40:52.796 A:middle
if they are continued
onto a second device,

757
00:40:53.556 --> 00:40:56.556 A:middle
that they remain perfectly
fine on the first device.

758
00:40:56.726 --> 00:40:58.866 A:middle
The user might pick it
back up in a few seconds

759
00:40:58.866 --> 00:40:59.966 A:middle
and keep using it there.

760
00:41:00.786 --> 00:41:03.476 A:middle
But if you have an activity
that's transactional in nature,

761
00:41:04.146 --> 00:41:07.906 A:middle
that you really only exist at
one place, if the user's filling

762
00:41:07.906 --> 00:41:12.856 A:middle
in a form as an example,
in our current lease.

763
00:41:13.246 --> 00:41:15.016 A:middle
If you're composing
a draft message,

764
00:41:15.686 --> 00:41:18.166 A:middle
when you continue draft
message to a second device,

765
00:41:18.826 --> 00:41:21.806 A:middle
back on the first device, Mail
will close that draft message

766
00:41:22.256 --> 00:41:25.916 A:middle
because Mail doesn't want the
user to have two draft messages

767
00:41:25.916 --> 00:41:30.126 A:middle
in two devices, and not know
which one is more recent.

768
00:41:30.126 --> 00:41:32.056 A:middle
So if you do have one of
these transactional kind

769
00:41:32.056 --> 00:41:34.446 A:middle
of activities, you
can take advantage

770
00:41:34.446 --> 00:41:36.546 A:middle
of userActivityWasContinued

771
00:41:37.046 --> 00:41:41.366 A:middle
and to do whatever you
need to do there for that.

772
00:41:41.836 --> 00:41:45.376 A:middle
Now Jerry talked about
our Website Handoff.

773
00:41:46.566 --> 00:41:49.786 A:middle
Website Handoff is the
ability for you as developers

774
00:41:50.506 --> 00:41:54.916 A:middle
to in your native applications,
if you have the kind

775
00:41:54.916 --> 00:41:57.876 A:middle
of application where you're kind

776
00:41:57.876 --> 00:42:00.126 A:middle
of really backing data
that's provided elsewhere.

777
00:42:00.126 --> 00:42:04.446 A:middle
It's not sitting in
a file in iCloud.

778
00:42:04.446 --> 00:42:08.326 A:middle
You know, perhaps it's some kind
of social browser application

779
00:42:08.366 --> 00:42:11.866 A:middle
where you have a
lovely iOS application

780
00:42:11.866 --> 00:42:14.296 A:middle
that presents a great
interface that takes advantage

781
00:42:14.296 --> 00:42:16.206 A:middle
of the features and the
device like the camera

782
00:42:16.206 --> 00:42:20.646 A:middle
and the touch screen to provide
a very high quality interface

783
00:42:20.686 --> 00:42:21.826 A:middle
to let people do things.

784
00:42:22.386 --> 00:42:25.056 A:middle
But you of course
also have a website

785
00:42:25.056 --> 00:42:29.056 A:middle
that other users can go to,
to kind of see the same thing,

786
00:42:29.246 --> 00:42:33.826 A:middle
or to interact with your Meta
application in the same way.

787
00:42:35.506 --> 00:42:41.196 A:middle
Your native application
can tell us that if a user

788
00:42:41.196 --> 00:42:43.936 A:middle
on another platform
doesn't have an application

789
00:42:43.936 --> 00:42:46.466 A:middle
which claims the activity
type that we're creating,

790
00:42:46.906 --> 00:42:50.006 A:middle
the user could also choose
to continue this activity

791
00:42:50.006 --> 00:42:51.406 A:middle
in a browser on that platform.

792
00:42:52.016 --> 00:42:54.586 A:middle
You notice here, we've
brought up our second device

793
00:42:54.586 --> 00:42:57.846 A:middle
and in the corner we see
Safari, and if the user clicks

794
00:42:57.846 --> 00:43:01.876 A:middle
on Safari, they would
get brought to a URL

795
00:43:01.876 --> 00:43:06.566 A:middle
that you provided back
on the originating device

796
00:43:06.566 --> 00:43:09.156 A:middle
and from that, you know
hopefully, the user is able

797
00:43:09.466 --> 00:43:12.436 A:middle
to continue what they were doing
in your native application.

798
00:43:13.816 --> 00:43:17.026 A:middle
And if we take a quick look
at what that looks like,

799
00:43:17.026 --> 00:43:19.196 A:middle
you know you would
create an activity just

800
00:43:19.196 --> 00:43:20.166 A:middle
as we've seen elsewhere.

801
00:43:21.066 --> 00:43:24.536 A:middle
You would fill in the user
info so that if it is continued

802
00:43:24.536 --> 00:43:28.196 A:middle
to another native application
of yours on a second device,

803
00:43:28.196 --> 00:43:32.106 A:middle
you'd get a high
fidelity, full pass through,

804
00:43:32.456 --> 00:43:35.196 A:middle
and you'd also set
this additional field;

805
00:43:35.196 --> 00:43:40.146 A:middle
the webpage URL, and you would
say here's an HTTP or HTTPS URL.

806
00:43:40.306 --> 00:43:43.286 A:middle
If a user goes there
that's also okay,

807
00:43:43.486 --> 00:43:46.026 A:middle
and that will get them
to what they need.

808
00:43:46.996 --> 00:43:54.016 A:middle
Similarly, we can do the same
type of thing to allow a user

809
00:43:54.016 --> 00:44:00.136 A:middle
in a browser to continue into
a native application on iOS.

810
00:44:01.336 --> 00:44:04.146 A:middle
And you know what that would
look like is if the user was

811
00:44:04.146 --> 00:44:11.016 A:middle
at your website, say on desktop
using the information there,

812
00:44:11.646 --> 00:44:13.936 A:middle
when they pulled
out their iOS device

813
00:44:13.936 --> 00:44:15.396 A:middle
in the corner they
would see the icon

814
00:44:15.396 --> 00:44:19.286 A:middle
for your native application,
and if they clicked on that,

815
00:44:19.286 --> 00:44:21.916 A:middle
you know, they would get brought
into your native application

816
00:44:22.386 --> 00:44:25.346 A:middle
and you could restore them
in your native application

817
00:44:25.346 --> 00:44:29.286 A:middle
to the same thing they would've
been seeing in the web browser

818
00:44:29.286 --> 00:44:30.216 A:middle
on the originating device.

819
00:44:31.166 --> 00:44:35.476 A:middle
Now to do this, and you'd take
advantage of some new API's

820
00:44:35.476 --> 00:44:40.556 A:middle
that Apple's providing on iOS
that allow you to securely kind

821
00:44:40.556 --> 00:44:43.466 A:middle
of claim a domain name
for your application

822
00:44:44.046 --> 00:44:46.446 A:middle
so that you can say
I'm this developer.

823
00:44:46.446 --> 00:44:49.196 A:middle
I truly own these domain
names and I'm willing

824
00:44:49.196 --> 00:44:53.196 A:middle
to let these applications take
advantage of that domain name.

825
00:44:53.666 --> 00:44:58.186 A:middle
And the way you do that is
you add these domain names

826
00:44:58.346 --> 00:45:01.536 A:middle
to the com.apple
.developer.associated

827
00:45:01.536 --> 00:45:04.486 A:middle
domainsentitlement
on your application,

828
00:45:05.286 --> 00:45:10.336 A:middle
and once you've done
that some code will reach

829
00:45:10.336 --> 00:45:15.196 A:middle
out to your website
periodically from the device

830
00:45:16.386 --> 00:45:18.806 A:middle
and after it's verified that
there's some information there,

831
00:45:18.806 --> 00:45:22.256 A:middle
we'll say this application
is allowed to continue

832
00:45:22.256 --> 00:45:25.236 A:middle
from this domain if another
device gave it to us.

833
00:45:25.946 --> 00:45:28.666 A:middle
And if that happens, you know
we bring up your application.

834
00:45:29.296 --> 00:45:33.266 A:middle
In your native application,
you know again,

835
00:45:33.266 --> 00:45:36.606 A:middle
your continueuser
Activityrestoration Handler is

836
00:45:36.606 --> 00:45:37.536 A:middle
going to get called.

837
00:45:37.536 --> 00:45:40.446 A:middle
And there, what you would do
is you would check the incoming

838
00:45:40.446 --> 00:45:45.046 A:middle
activity type to see if it was
this special NSUserActivity type

839
00:45:45.106 --> 00:45:46.476 A:middle
continuing from web browser.

840
00:45:47.196 --> 00:45:50.636 A:middle
And if it was, you know
there isn't a user info there

841
00:45:50.636 --> 00:45:51.636 A:middle
that you can take advantage

842
00:45:51.636 --> 00:45:55.126 A:middle
of because you don't have native
code running on the other side.

843
00:45:55.366 --> 00:45:59.396 A:middle
It's running in a web browser,
but you do have the webpage URL

844
00:45:59.396 --> 00:46:02.156 A:middle
that the user was at in
that browser and from

845
00:46:02.156 --> 00:46:06.236 A:middle
that webpage URL you could
bring your native app up kind

846
00:46:06.236 --> 00:46:08.396 A:middle
of looking at that same thing.

847
00:46:08.726 --> 00:46:10.936 A:middle
You also of course
would continue

848
00:46:10.936 --> 00:46:12.986 A:middle
to get any other
user activity types

849
00:46:12.986 --> 00:46:14.396 A:middle
that your application
has claimed.

850
00:46:14.906 --> 00:46:16.126 A:middle
So if it's any of those,

851
00:46:16.126 --> 00:46:17.546 A:middle
you would do the same
thing you saw earlier.

852
00:46:17.546 --> 00:46:22.066 A:middle
Lastly, let's talk about
Continuation Streams.

853
00:46:22.766 --> 00:46:28.076 A:middle
Continuation streams are a
way for you to get and set

854
00:46:28.076 --> 00:46:31.816 A:middle
up after user has chosen
to resume an activity

855
00:46:31.816 --> 00:46:34.686 A:middle
in a second device,
a bi-directional pair

856
00:46:34.686 --> 00:46:36.586 A:middle
of input streams
between the two devices

857
00:46:36.926 --> 00:46:41.326 A:middle
that you can use primarily we
think, for interactive purposes,

858
00:46:41.826 --> 00:46:44.246 A:middle
if the user's going to
continue to use both devices,

859
00:46:44.586 --> 00:46:46.596 A:middle
and you want to be able
to throw things back

860
00:46:46.596 --> 00:46:47.666 A:middle
and forth very quickly.

861
00:46:49.016 --> 00:46:53.056 A:middle
And what that looks like
you know is the users

862
00:46:53.726 --> 00:46:55.956 A:middle
in your native application
on your first device

863
00:46:55.956 --> 00:46:59.946 A:middle
and we see your icon in the
corner, and the user swipes up

864
00:46:59.946 --> 00:47:01.766 A:middle
and we bring up your
application.

865
00:47:02.896 --> 00:47:06.476 A:middle
And then we set up
a set of NS streams

866
00:47:06.506 --> 00:47:07.566 A:middle
between the two processes.

867
00:47:08.286 --> 00:47:10.856 A:middle
And once those are up,
you're free to read and write

868
00:47:10.856 --> 00:47:13.136 A:middle
from those streams
and communicate

869
00:47:13.136 --> 00:47:18.526 A:middle
between the two devices in a
fairly high performance manner

870
00:47:18.786 --> 00:47:20.496 A:middle
for whatever purposes
you want to do.

871
00:47:21.186 --> 00:47:24.006 A:middle
What that looks like in the
code again is you create

872
00:47:24.006 --> 00:47:25.036 A:middle
an NSUserActivity.

873
00:47:25.036 --> 00:47:28.986 A:middle
You set a delegate
and then you set this

874
00:47:29.076 --> 00:47:31.776 A:middle
SupportsContinuationStreams
property to yes

875
00:47:32.686 --> 00:47:33.836 A:middle
and you make it current.

876
00:47:34.946 --> 00:47:39.306 A:middle
And on the receiving device,
when the activity comes

877
00:47:39.846 --> 00:47:42.676 A:middle
in in continueuserActivity
restorationHandler,

878
00:47:43.536 --> 00:47:46.316 A:middle
you would check if that activity
supports Continuation Streams,

879
00:47:47.286 --> 00:47:51.466 A:middle
and if it does, you know you
can call this additional method,

880
00:47:51.946 --> 00:47:54.236 A:middle
get ContinuationStreams
WithCompletionHandler

881
00:47:55.146 --> 00:47:59.896 A:middle
and that gets past a block
and we, when you call that,

882
00:47:59.896 --> 00:48:03.436 A:middle
will reach back, try to set
up these pair of streams

