

1
00:00:00.506 --> 00:00:11.796 A:middle
[ Silence ]

2
00:00:12.296 --> 00:00:12.976 A:middle
&gt;&gt; Good morning.

3
00:00:13.516 --> 00:00:18.546 A:middle
[ Applause ]

4
00:00:19.046 --> 00:00:19.236 A:middle
All right.

5
00:00:19.416 --> 00:00:20.346 A:middle
You're happy to see me.

6
00:00:20.346 --> 00:00:20.776 A:middle
That's good.

7
00:00:20.956 --> 00:00:24.996 A:middle
My name's Will Turner and with
my colleague, Brooke Callahan,

8
00:00:24.996 --> 00:00:28.376 A:middle
we'll be talking to you
about testing in Xcode 6.

9
00:00:29.396 --> 00:00:31.286 A:middle
And let's get started.

10
00:00:32.006 --> 00:00:34.066 A:middle
So we're going to cover
several topics today.

11
00:00:34.066 --> 00:00:36.996 A:middle
To start off, to just
kind of motivate this.

12
00:00:37.436 --> 00:00:38.866 A:middle
Think about the benefits
of testing.

13
00:00:38.866 --> 00:00:40.626 A:middle
Why should we bother
in the first place?

14
00:00:41.266 --> 00:00:45.166 A:middle
Then we'll get into what it
takes to add test to a project.

15
00:00:45.356 --> 00:00:47.226 A:middle
Maybe you have old projects
that don't have tests.

16
00:00:47.226 --> 00:00:52.386 A:middle
And then we'll talk about
some new features in Xcode 6

17
00:00:52.756 --> 00:00:55.136 A:middle
which allow you to test
asynchronous systems

18
00:00:55.176 --> 00:00:57.636 A:middle
and then also testing
features that allow you

19
00:00:57.636 --> 00:00:59.866 A:middle
to catch performance
regressions.

20
00:01:02.646 --> 00:01:06.876 A:middle
So why should we test?

21
00:01:07.096 --> 00:01:10.336 A:middle
Obviously, every time moment
we spend developing is an

22
00:01:10.336 --> 00:01:11.596 A:middle
investment of a resource.

23
00:01:11.596 --> 00:01:14.216 A:middle
Our resource is time
and our colleagues

24
00:01:14.216 --> 00:01:16.866 A:middle
for maintaining the code
base that we create.

25
00:01:17.976 --> 00:01:18.706 A:middle
So the obvious thing

26
00:01:18.706 --> 00:01:21.106 A:middle
about testing is it
helps you find bugs

27
00:01:21.106 --> 00:01:24.476 A:middle
and there's many classes of
bugs that you find with testing.

28
00:01:24.776 --> 00:01:26.996 A:middle
They are regressions so cases

29
00:01:26.996 --> 00:01:30.036 A:middle
where you've shipped your
product, you make a code change,

30
00:01:30.036 --> 00:01:33.236 A:middle
add a feature and in the
process something breaks

31
00:01:33.236 --> 00:01:36.356 A:middle
and now your 1.1
or 1.2 has a bug

32
00:01:36.356 --> 00:01:37.796 A:middle
and your customers are unhappy.

33
00:01:38.346 --> 00:01:39.476 A:middle
We hate regressions.

34
00:01:40.036 --> 00:01:41.506 A:middle
Tests are a fantastic way

35
00:01:41.506 --> 00:01:43.936 A:middle
to ensure your code ships
without regressions.

36
00:01:44.656 --> 00:01:47.246 A:middle
There's also bugs where
performance changes.

37
00:01:47.246 --> 00:01:49.016 A:middle
You make a change in your code

38
00:01:49.016 --> 00:01:51.326 A:middle
and now suddenly something
is taking a lot more time

39
00:01:51.326 --> 00:01:54.856 A:middle
to execute and maybe that's only
on some devices and not others.

40
00:01:55.326 --> 00:01:57.806 A:middle
So tests again can
be a great way

41
00:01:57.876 --> 00:01:59.546 A:middle
to catch performance
regressions.

42
00:02:00.176 --> 00:02:04.036 A:middle
The other sort of less talked
about and less obvious benefit

43
00:02:04.036 --> 00:02:06.836 A:middle
of testing is that it
codifies the requirements

44
00:02:07.286 --> 00:02:08.776 A:middle
of your project.

45
00:02:09.026 --> 00:02:11.696 A:middle
So especially if you're
sharing code with engineers,

46
00:02:11.696 --> 00:02:16.136 A:middle
you create classes as classes
have APIs and a lot of times

47
00:02:16.176 --> 00:02:18.666 A:middle
because Objective-C and
Swift are great languages

48
00:02:18.666 --> 00:02:23.786 A:middle
for expressing the API,
semantics of the API,

49
00:02:24.476 --> 00:02:25.866 A:middle
they're self-documenting.

50
00:02:25.866 --> 00:02:27.656 A:middle
We think, okay, our job is done.

51
00:02:28.086 --> 00:02:30.486 A:middle
But in truth, they
don't really account

52
00:02:30.486 --> 00:02:32.276 A:middle
for all the possible
permutations

53
00:02:32.276 --> 00:02:34.076 A:middle
of inputs to those functions.

54
00:02:34.506 --> 00:02:35.666 A:middle
So if you write tests,

55
00:02:36.526 --> 00:02:39.616 A:middle
those tests help codify the
requirements of those APIs.

56
00:02:39.616 --> 00:02:41.066 A:middle
So another engineer
can come along.

57
00:02:41.476 --> 00:02:43.066 A:middle
They can make code
changes in that area

58
00:02:43.066 --> 00:02:45.646 A:middle
and the tests helps them
understand what the expected

59
00:02:45.646 --> 00:02:46.576 A:middle
behavior is.

60
00:02:47.526 --> 00:02:51.956 A:middle
So to get started with
tests, you may have a project

61
00:02:52.096 --> 00:02:53.816 A:middle
that doesn't have test already.

62
00:02:53.976 --> 00:02:55.886 A:middle
So you want to add
test to that project

63
00:02:55.886 --> 00:02:57.856 A:middle
and then the obvious
thing to do is make sure

64
00:02:57.856 --> 00:02:59.456 A:middle
that those tests pass.

65
00:03:00.706 --> 00:03:02.986 A:middle
Alternatively, you may
start with a new project.

66
00:03:03.086 --> 00:03:05.756 A:middle
And in that case, you have the
option of a different workflow

67
00:03:06.106 --> 00:03:08.916 A:middle
where you create tests first.

68
00:03:09.326 --> 00:03:11.996 A:middle
And then you write code
that passes those tests

69
00:03:12.346 --> 00:03:15.416 A:middle
and that's sometimes referred
to as test-driven development.

70
00:03:16.986 --> 00:03:19.376 A:middle
So now you're set up.

71
00:03:19.376 --> 00:03:20.126 A:middle
You've got your test.

72
00:03:20.126 --> 00:03:20.996 A:middle
They're passing.

73
00:03:21.166 --> 00:03:23.136 A:middle
You can go into a workflow
that we talked about.

74
00:03:23.136 --> 00:03:25.876 A:middle
We consider continuous
integration workflow.

75
00:03:26.186 --> 00:03:27.656 A:middle
And you start off
in a green state

76
00:03:27.656 --> 00:03:31.316 A:middle
where everything is working
and you're making code changes.

77
00:03:31.316 --> 00:03:33.246 A:middle
You're adding features,
fixing bugs.

78
00:03:33.656 --> 00:03:37.396 A:middle
And at some point, one of these
code changes introduces a bug.

79
00:03:37.776 --> 00:03:39.706 A:middle
And so now, your
continuous integration

80
00:03:39.706 --> 00:03:42.206 A:middle
because you've written
tests identifies that bug

81
00:03:42.206 --> 00:03:45.696 A:middle
and you know right away, right
after that first code change,

82
00:03:46.006 --> 00:03:47.646 A:middle
you know that the bug
has been introduced.

83
00:03:48.156 --> 00:03:50.706 A:middle
So then you can take the
necessary steps to fix the bug

84
00:03:50.706 --> 00:03:52.476 A:middle
and return to a green state.

85
00:03:52.766 --> 00:03:53.476 A:middle
And what you really like,

86
00:03:53.476 --> 00:03:56.816 A:middle
I think is a green state
represents known quality.

87
00:03:57.276 --> 00:04:00.476 A:middle
And having tests and having
continuous integration ensures

88
00:04:00.476 --> 00:04:03.696 A:middle
that your projects
remain in a known state

89
00:04:03.696 --> 00:04:07.356 A:middle
of quality all the time.

90
00:04:07.546 --> 00:04:09.186 A:middle
So to get started, let's talk

91
00:04:09.186 --> 00:04:12.036 A:middle
about how testing
works in Xcode.

92
00:04:12.576 --> 00:04:15.236 A:middle
Xcode ships with a
framework called XCTest

93
00:04:15.746 --> 00:04:17.766 A:middle
and this is framework
for testing.

94
00:04:17.766 --> 00:04:20.586 A:middle
It provides a set of APIs
that lets you create tests,

95
00:04:21.196 --> 00:04:24.256 A:middle
run the tests, express
expectations,

96
00:04:24.256 --> 00:04:25.406 A:middle
passes and failures.

97
00:04:26.136 --> 00:04:29.736 A:middle
It all starts with the
base class XCTestCase.

98
00:04:30.156 --> 00:04:33.476 A:middle
And to create test,
you subclass XCTestCase

99
00:04:33.596 --> 00:04:35.416 A:middle
and then you add test methods.

100
00:04:35.416 --> 00:04:38.536 A:middle
And these test methods
follow a naming convention.

101
00:04:38.976 --> 00:04:40.116 A:middle
They return void.

102
00:04:41.036 --> 00:04:44.456 A:middle
They're prefixed with the
word, "test" in lowercase

103
00:04:45.076 --> 00:04:46.626 A:middle
and they take no parameters.

104
00:04:47.096 --> 00:04:50.586 A:middle
The remainder of the method
name is at your discretion.

105
00:04:50.586 --> 00:04:56.576 A:middle
It should be sort of a name that
conveys the purpose of the test.

106
00:04:56.756 --> 00:04:58.016 A:middle
Inside these test methods,

107
00:04:58.016 --> 00:05:01.996 A:middle
you can use assertion APIs we
provide to report failures.

108
00:05:02.206 --> 00:05:07.536 A:middle
For example, XCTAssertEqual
compares two scalar values

109
00:05:07.676 --> 00:05:10.586 A:middle
and if they don't match,
it outputs a string

110
00:05:10.586 --> 00:05:14.256 A:middle
and reports a failure
to the test harness.

111
00:05:15.976 --> 00:05:19.106 A:middle
So in Xcode, we manage
a lot of different parts

112
00:05:19.106 --> 00:05:20.626 A:middle
of our projects through targets.

113
00:05:20.626 --> 00:05:22.776 A:middle
And we have test targets
for managing tests.

114
00:05:23.676 --> 00:05:25.556 A:middle
Test targets build bundles

115
00:05:25.846 --> 00:05:29.436 A:middle
and these bundles contain
the compiled test code

116
00:05:29.946 --> 00:05:32.486 A:middle
and also resources that you
would want to use in the test.

117
00:05:32.486 --> 00:05:34.816 A:middle
Maybe you have data files
that drive your tests.

118
00:05:35.426 --> 00:05:37.536 A:middle
These go in your test bundle
but you don't really want

119
00:05:37.536 --> 00:05:39.316 A:middle
to ship those with
your application.

120
00:05:39.316 --> 00:05:40.166 A:middle
You go and ship them with --

121
00:05:40.166 --> 00:05:41.616 A:middle
though you don't want
to ship them at all.

122
00:05:41.616 --> 00:05:43.336 A:middle
You want them to be
with your test bundle.

123
00:05:44.056 --> 00:05:48.076 A:middle
So these are -- test targets
are automatically included

124
00:05:48.076 --> 00:05:49.056 A:middle
in new projects.

125
00:05:49.056 --> 00:05:51.206 A:middle
If I go today and I
create a new application,

126
00:05:51.886 --> 00:05:56.556 A:middle
you'll see there's a test target
and a test class already there

127
00:05:56.556 --> 00:05:59.256 A:middle
to start me off, get me right
in test from the beginning.

128
00:06:00.386 --> 00:06:03.716 A:middle
You can also add test
targets to existing projects.

129
00:06:04.256 --> 00:06:07.216 A:middle
And this may be something
you want to do to a project

130
00:06:07.216 --> 00:06:09.976 A:middle
that hasn't a test or it
also be a step you take

131
00:06:09.976 --> 00:06:13.796 A:middle
to help organize your
tests because you can have

132
00:06:13.796 --> 00:06:17.316 A:middle
as many test targets as you
want and it's useful sometimes

133
00:06:17.316 --> 00:06:20.116 A:middle
that you will run just this
test target or that test target

134
00:06:20.446 --> 00:06:21.726 A:middle
or you can run them
all together.

135
00:06:21.896 --> 00:06:28.666 A:middle
So let's think about a
moment about how tests run.

136
00:06:28.666 --> 00:06:31.176 A:middle
Because they are bundles,
these are not executables

137
00:06:31.176 --> 00:06:32.666 A:middle
that can be launched themselves.

138
00:06:33.126 --> 00:06:37.046 A:middle
So instead, we need to host
them in an executable process.

139
00:06:38.796 --> 00:06:41.456 A:middle
Generally, we inject
these into your apps.

140
00:06:41.696 --> 00:06:44.386 A:middle
So your test can be written
against your application

141
00:06:44.386 --> 00:06:47.676 A:middle
and it can access all the code
in your application which means

142
00:06:47.676 --> 00:06:49.216 A:middle
when we run the test, we run it

143
00:06:49.216 --> 00:06:51.106 A:middle
in the context of
your application.

144
00:06:52.656 --> 00:06:54.686 A:middle
Alternatively, you can run them

145
00:06:54.686 --> 00:06:59.126 A:middle
in a hosting process
that's provided by Xcode.

146
00:06:59.656 --> 00:07:02.036 A:middle
Resources for tests,
as I mentioned before,

147
00:07:02.036 --> 00:07:04.026 A:middle
are not in the main bundle.

148
00:07:04.026 --> 00:07:05.256 A:middle
They're in your test bundle.

149
00:07:05.616 --> 00:07:09.666 A:middle
So when you go to load them,
don't use NSBundle mainBundle.

150
00:07:09.666 --> 00:07:11.246 A:middle
This is something
that trips people up.

151
00:07:11.246 --> 00:07:14.146 A:middle
I think a lot of us just kind
of have NSBundle mainBundle

152
00:07:14.146 --> 00:07:15.956 A:middle
on autocomplete in our heads.

153
00:07:16.406 --> 00:07:20.496 A:middle
But instead, we want to
use NSBundle bundleForClass

154
00:07:20.496 --> 00:07:22.216 A:middle
and pass your test class.

155
00:07:22.516 --> 00:07:25.146 A:middle
That ensures that you're
going into the test bundle

156
00:07:25.146 --> 00:07:26.516 A:middle
to locate that resource.

157
00:07:29.416 --> 00:07:33.276 A:middle
So running tests, Xcode lets you
run tests in a number of ways.

158
00:07:33.486 --> 00:07:35.706 A:middle
The simplest way is Command-U

159
00:07:35.706 --> 00:07:38.356 A:middle
and this takes your active
scheme and runs the tests

160
00:07:38.356 --> 00:07:40.056 A:middle
that are associated
with that scheme.

161
00:07:41.616 --> 00:07:45.786 A:middle
You also have buttons and the
Source Editor's got it next

162
00:07:45.786 --> 00:07:49.656 A:middle
to the test method that lets you
run just that test or the class

163
00:07:49.756 --> 00:07:51.256 A:middle
and all of the tests
in that class.

164
00:07:52.336 --> 00:07:55.366 A:middle
So you have a similar set of
buttons in the Test Navigator.

165
00:07:55.996 --> 00:08:00.116 A:middle
And you can also run tests using
xcodebuild so if you have a set

166
00:08:00.116 --> 00:08:02.696 A:middle
of scripts that you've used
to create your own kind

167
00:08:02.696 --> 00:08:05.646 A:middle
of automation setup,
you can use xcodebuild.

168
00:08:06.436 --> 00:08:10.576 A:middle
And you pass at the test action
and you pass your project.

169
00:08:11.646 --> 00:08:13.476 A:middle
Tell it which scheme
-- this is essential

170
00:08:13.476 --> 00:08:15.516 A:middle
because your project
may have many schemes --

171
00:08:16.256 --> 00:08:17.866 A:middle
and the destination.

172
00:08:18.146 --> 00:08:20.366 A:middle
And you can have multiple
destinations so if you want

173
00:08:20.366 --> 00:08:23.806 A:middle
to run on multiple devices,
you can pass these all

174
00:08:23.806 --> 00:08:29.636 A:middle
with distinct -destination flags
and xcodebuild will run them.

175
00:08:30.046 --> 00:08:32.326 A:middle
When your tests are done,
where do you see the results?

176
00:08:32.496 --> 00:08:33.796 A:middle
Again, there's a
number of places

177
00:08:33.796 --> 00:08:35.586 A:middle
where we display the
results of the tests.

178
00:08:36.076 --> 00:08:37.726 A:middle
The first is at Test Navigator.

179
00:08:37.785 --> 00:08:42.916 A:middle
We will see a green checkmark
or red icon indicating failure.

180
00:08:43.876 --> 00:08:45.496 A:middle
Also in the Issue Navigator.

181
00:08:45.696 --> 00:08:49.486 A:middle
If you hit a test failure,
you'll see not only the failure

182
00:08:49.486 --> 00:08:52.016 A:middle
but the reason it failed and
so if you've used our search

183
00:08:52.016 --> 00:08:55.366 A:middle
in macros, this is where you'll
see that error string that says,

184
00:08:55.366 --> 00:08:57.896 A:middle
you know, 50 was
not equal to zero

185
00:08:57.896 --> 00:09:00.256 A:middle
or whatever the assertion
you were testing.

186
00:09:02.126 --> 00:09:04.266 A:middle
They also show in the
Source Editor's gutter

187
00:09:04.266 --> 00:09:08.146 A:middle
and then finally, most
useful is the Test Reports

188
00:09:08.146 --> 00:09:12.436 A:middle
where we show all the tests that
have run and the logs associated

189
00:09:12.436 --> 00:09:14.756 A:middle
with them and some
additional data that we'll get

190
00:09:14.756 --> 00:09:16.056 A:middle
to later in the presentation.

191
00:09:18.216 --> 00:09:19.276 A:middle
So let's get started.

192
00:09:19.276 --> 00:09:23.006 A:middle
See what it looks like to add
tests to an existing project.

193
00:09:24.666 --> 00:09:28.486 A:middle
Let's take a look at how
this is put together.

194
00:09:28.706 --> 00:09:32.156 A:middle
To simplify this for the demo,
I've tweaked it a little bit

195
00:09:32.216 --> 00:09:33.736 A:middle
from the sample code
that's online.

196
00:09:33.896 --> 00:09:40.086 A:middle
But basically the guts of this
app is this NSOperation subclass

197
00:09:40.166 --> 00:09:42.286 A:middle
that parses the XML data.

198
00:09:42.706 --> 00:09:48.426 A:middle
And NSOperation, as you know, is
designed to provide concurrency

199
00:09:48.476 --> 00:09:51.496 A:middle
and be run in the background.

200
00:09:51.496 --> 00:09:54.096 A:middle
This class has a Delegate
that it calls back

201
00:09:54.286 --> 00:09:56.676 A:middle
with certain events
when parsing is done,

202
00:09:56.676 --> 00:09:58.606 A:middle
when it's parsed a
certain number of objects

203
00:09:58.606 --> 00:09:59.976 A:middle
or if it encounters
any kind of error.

204
00:10:02.166 --> 00:10:06.026 A:middle
So we have this property
here, parsedEarthquakes

205
00:10:06.026 --> 00:10:08.906 A:middle
and that's something you can
access safely at any time

206
00:10:08.906 --> 00:10:12.146 A:middle
to see the array of
parsedEarthquake objects.

207
00:10:12.736 --> 00:10:15.896 A:middle
So I'd like to write
a test that validates

208
00:10:16.066 --> 00:10:18.636 A:middle
that this parsed
operation behaves correctly.

209
00:10:19.536 --> 00:10:21.546 A:middle
So let's start clean.

210
00:10:21.726 --> 00:10:28.556 A:middle
We have -- not a
clean slate here.

211
00:10:33.596 --> 00:10:40.716 A:middle
We're going to reset
this a little bit

212
00:10:40.716 --> 00:10:46.056 A:middle
so you can see what it
looks like to add test

213
00:10:46.056 --> 00:10:47.096 A:middle
to an existing project.

214
00:10:47.826 --> 00:10:52.806 A:middle
So we have our project
and at this point,

215
00:10:52.806 --> 00:10:53.776 A:middle
there's no test target.

216
00:10:54.316 --> 00:10:57.636 A:middle
So to add a test, I'm going
to go to the file menu

217
00:10:58.206 --> 00:10:59.776 A:middle
and will select a new target.

218
00:10:59.776 --> 00:11:04.706 A:middle
I'm going to select under
other CoCotest testing.

219
00:11:06.326 --> 00:11:08.066 A:middle
And I'm going to
name this target.

220
00:11:08.236 --> 00:11:12.866 A:middle
I'm going to call it
two just to be safe.

221
00:11:13.386 --> 00:11:15.996 A:middle
And now we've noticed
a few things.

222
00:11:16.296 --> 00:11:17.606 A:middle
We see a new group here.

223
00:11:18.176 --> 00:11:21.976 A:middle
Inside of that, we see
a template test file

224
00:11:23.006 --> 00:11:26.886 A:middle
and if we look at the
scheme, we'll also notice

225
00:11:27.316 --> 00:11:32.306 A:middle
that under the test action, we
have this one that I removed

226
00:11:32.416 --> 00:11:34.596 A:middle
but more importantly,
we have this new one

227
00:11:34.656 --> 00:11:37.696 A:middle
that just got added.

228
00:11:37.956 --> 00:11:40.826 A:middle
So there's a few
template methods in here.

229
00:11:40.826 --> 00:11:44.016 A:middle
I'm just going to remove
these so we can start clean

230
00:11:44.016 --> 00:11:45.126 A:middle
and build our test out.

231
00:11:45.916 --> 00:11:47.736 A:middle
So the first thing, to recap,

232
00:11:47.786 --> 00:11:49.386 A:middle
what I want to do
is write a test

233
00:11:49.386 --> 00:11:50.966 A:middle
for this operation subclass.

234
00:11:51.486 --> 00:11:53.716 A:middle
So I'm going to import
the header

235
00:11:54.536 --> 00:11:56.336 A:middle
so that I can access the APIs.

236
00:11:56.336 --> 00:12:01.056 A:middle
The next thing to do is I'm
going to add a test method.

237
00:12:01.796 --> 00:12:03.576 A:middle
And just to reiterate
from earlier,

238
00:12:03.576 --> 00:12:05.056 A:middle
this method returns void.

239
00:12:05.776 --> 00:12:10.356 A:middle
It is prefixed with test and
there are no other parameters.

240
00:12:11.196 --> 00:12:13.916 A:middle
The rest of the name is just
a name that I've come up with

241
00:12:14.016 --> 00:12:18.916 A:middle
that to me represents
what this test is for.

242
00:12:19.136 --> 00:12:21.676 A:middle
Now, I like to sometimes
go through

243
00:12:21.676 --> 00:12:23.596 A:middle
and outline the steps
I'm going to take

244
00:12:23.596 --> 00:12:25.586 A:middle
as comments before
I write the code.

245
00:12:25.586 --> 00:12:26.976 A:middle
It helps me organize
my thoughts.

246
00:12:27.206 --> 00:12:30.736 A:middle
So just hear the summary of
what the test is going to do.

247
00:12:31.276 --> 00:12:35.346 A:middle
We're going to get a URL to
a resource and that's going

248
00:12:35.346 --> 00:12:38.076 A:middle
to be a resource of XML
data that's in the bundle.

249
00:12:38.436 --> 00:12:40.146 A:middle
We're going to load
that into memory.

250
00:12:40.886 --> 00:12:44.306 A:middle
We're going to create the parse
operation then we'll run the

251
00:12:44.306 --> 00:12:45.716 A:middle
operation directly.

252
00:12:46.526 --> 00:12:48.986 A:middle
And finally, we'll check
the number of earthquakes

253
00:12:48.986 --> 00:12:50.066 A:middle
and see if it's correct.

254
00:12:50.066 --> 00:12:53.846 A:middle
So if I'm going to get a
resource to the bundle,

255
00:12:53.846 --> 00:12:55.646 A:middle
I need to add the file.

256
00:12:55.646 --> 00:12:59.196 A:middle
Well, I've had this
file here that is,

257
00:13:04.116 --> 00:13:10.676 A:middle
let's see, I'm going
to copy this file

258
00:13:10.806 --> 00:13:13.096 A:middle
into my project as a resource.

259
00:13:13.626 --> 00:13:15.716 A:middle
I'll copy it in.

260
00:13:16.326 --> 00:13:21.286 A:middle
And this is just some data
that I downloaded in advance

261
00:13:21.316 --> 00:13:23.716 A:middle
because I want to take the
network out of the equation

262
00:13:23.716 --> 00:13:24.696 A:middle
when I write my tests.

263
00:13:24.776 --> 00:13:26.576 A:middle
There's nothing wrong
with testing the network

264
00:13:26.576 --> 00:13:29.986 A:middle
but in general if you keep your
tests simpler, when they fail,

265
00:13:29.986 --> 00:13:31.896 A:middle
it'll be easier to figure
out why they failed.

266
00:13:32.246 --> 00:13:33.996 A:middle
So in this test,
I'm not interested

267
00:13:33.996 --> 00:13:35.416 A:middle
in validating if
the network works.

268
00:13:35.416 --> 00:13:37.296 A:middle
I'm validating the
parsing works.

269
00:13:37.886 --> 00:13:42.386 A:middle
So by having this in my bundle,
I eliminate that as a concern.

270
00:13:42.936 --> 00:13:47.726 A:middle
So to get the URL, I'm
going to go into the bundle

271
00:13:48.466 --> 00:13:52.976 A:middle
and get a resource URL
and then the next thing

272
00:13:52.976 --> 00:13:56.746 A:middle
that I do is just load
that as an NSData.

273
00:13:57.416 --> 00:14:00.256 A:middle
The next step is to
create the parse operation.

274
00:14:00.756 --> 00:14:04.246 A:middle
So that is the class that
we are trying to test here.

275
00:14:04.246 --> 00:14:07.626 A:middle
I'm going to create it with
this data and I'm not going

276
00:14:07.626 --> 00:14:10.036 A:middle
to set a Delegate because in
this test, I don't need to.

277
00:14:11.196 --> 00:14:13.666 A:middle
The next thing is to run
the operation directly.

278
00:14:13.866 --> 00:14:16.396 A:middle
Now, we know that
NSOperation is designed

279
00:14:16.396 --> 00:14:17.496 A:middle
to be run in the background.

280
00:14:17.786 --> 00:14:20.556 A:middle
But operations allow you
to invoke them directly

281
00:14:20.556 --> 00:14:22.816 A:middle
and synchronously by
just calling start.

282
00:14:23.186 --> 00:14:25.846 A:middle
That means when we call
start, it's going to run

283
00:14:25.846 --> 00:14:28.526 A:middle
and when we return,
it's finished running.

284
00:14:29.506 --> 00:14:33.146 A:middle
So at that point, I can
check the results and see

285
00:14:33.496 --> 00:14:35.206 A:middle
if they are what I expected.

286
00:14:35.836 --> 00:14:38.206 A:middle
Now, I have zero here.

287
00:14:38.306 --> 00:14:42.056 A:middle
I actually know that there
is more than zero but I'd

288
00:14:42.056 --> 00:14:44.296 A:middle
like to run this and let
you see what a failure looks

289
00:14:44.296 --> 00:14:45.886 A:middle
like before we go any further.

290
00:14:46.216 --> 00:14:49.666 A:middle
So I'm hitting Command-U
to run the test.

291
00:14:51.196 --> 00:14:55.526 A:middle
It ran quickly and you can
see here's this message,

292
00:14:55.646 --> 00:15:01.286 A:middle
parse operation zero failed,
55 is not equal to zero.

293
00:15:01.286 --> 00:15:05.866 A:middle
Okay, so there are 55
earthquakes in there.

294
00:15:07.016 --> 00:15:08.966 A:middle
So let's run this again.

295
00:15:10.406 --> 00:15:12.736 A:middle
And now we've passed our test.

296
00:15:12.736 --> 00:15:15.866 A:middle
And again you see that
same pass indicator there

297
00:15:15.866 --> 00:15:21.396 A:middle
in the Test Navigator and we
see it here in the Test Log

298
00:15:22.216 --> 00:15:24.016 A:middle
that we parsed and succeeded.

299
00:15:25.056 --> 00:15:27.466 A:middle
So that's what it takes
to add test to a project.

300
00:15:27.466 --> 00:15:29.956 A:middle
We created a new test
target and then we go in

301
00:15:29.956 --> 00:15:31.126 A:middle
and we added the test code.

302
00:15:31.126 --> 00:15:34.166 A:middle
We create test methods
and we used the assertions

303
00:15:34.166 --> 00:15:36.236 A:middle
to validate the state
that we expect.

304
00:15:36.926 --> 00:15:39.056 A:middle
So I'm going to switch
back to slides now.

305
00:15:40.426 --> 00:15:43.696 A:middle
Okay, so let's get on to
what's new in Xcode 6.

306
00:15:43.916 --> 00:15:46.616 A:middle
We have new APIs and
improvements to our tools.

307
00:15:47.206 --> 00:15:50.706 A:middle
So the first thing I want

308
00:15:50.706 --> 00:15:54.826 A:middle
to mention is we've added
some improvements that help

309
00:15:54.826 --> 00:15:56.376 A:middle
with the compatibility story.

310
00:15:56.956 --> 00:15:59.856 A:middle
And I'll get into more detail
but this basically means

311
00:15:59.856 --> 00:16:03.656 A:middle
which versions of our OS
you can target using XCTest.

312
00:16:04.996 --> 00:16:07.586 A:middle
We've also added instruments
integration for tests

313
00:16:07.836 --> 00:16:10.656 A:middle
and Brooke will talk to you
more about that later on.

314
00:16:12.116 --> 00:16:15.386 A:middle
Finally, we've got new APIs
and as I mentioned earlier,

315
00:16:15.716 --> 00:16:17.816 A:middle
these are both for
asynchronous testing

316
00:16:17.816 --> 00:16:19.266 A:middle
and for performance testing.

317
00:16:20.586 --> 00:16:24.226 A:middle
So first, XCTest on
older iOS versions.

318
00:16:24.896 --> 00:16:27.096 A:middle
Originally XCTest
shipped and it was part

319
00:16:27.096 --> 00:16:28.746 A:middle
of the iOS release itself.

320
00:16:29.066 --> 00:16:31.936 A:middle
So it meant when we shipped
it, you could only run it

321
00:16:32.206 --> 00:16:34.496 A:middle
on versions of iOS that had it.

322
00:16:34.696 --> 00:16:35.816 A:middle
We've changed now.

323
00:16:35.976 --> 00:16:38.696 A:middle
Now we're shipping
XCTest with Xcode itself.

324
00:16:39.206 --> 00:16:42.416 A:middle
So this means that as we
add new features to XCTest,

325
00:16:42.416 --> 00:16:45.066 A:middle
you don't have to worry about
whether or not they're going

326
00:16:45.066 --> 00:16:46.946 A:middle
to be available where
you're running your tests

327
00:16:46.946 --> 00:16:48.436 A:middle
because you're always
going to be testing

328
00:16:48.436 --> 00:16:50.336 A:middle
with the current version
that's in the Xcode.

329
00:16:50.916 --> 00:16:56.656 A:middle
And this also means that we can
target older versions of iOS.

330
00:16:56.656 --> 00:17:00.846 A:middle
So anywhere that Xcode supports,
XCTest will also support.

331
00:17:00.846 --> 00:17:03.376 A:middle
And this means iOS 6 and later.

332
00:17:04.516 --> 00:17:08.776 A:middle
[ Applause ]

333
00:17:09.276 --> 00:17:12.046 A:middle
So that's probably a good
time to just mention OCUnit

334
00:17:12.046 --> 00:17:16.336 A:middle
which is the legacy technology
that XCTest was derived from.

335
00:17:17.766 --> 00:17:21.086 A:middle
In Xcode 5.1, we
deprecated OCUnit.

336
00:17:21.086 --> 00:17:23.116 A:middle
We're not adding new features

337
00:17:23.316 --> 00:17:28.606 A:middle
and we really think the time
is now to move to XCTest

338
00:17:28.606 --> 00:17:32.076 A:middle
because we've added new features
to it, integration is better

339
00:17:32.466 --> 00:17:37.136 A:middle
and OCUnit is no longer where
we're focusing our energies.

340
00:17:39.566 --> 00:17:42.626 A:middle
If you have existing targets
that you want to switch

341
00:17:42.626 --> 00:17:45.646 A:middle
from XCTest, we recommend
you use a migrator

342
00:17:45.646 --> 00:17:46.976 A:middle
in Xcode to do so.

343
00:17:47.676 --> 00:17:50.356 A:middle
The reason for this
and also to do this,

344
00:17:50.356 --> 00:17:51.846 A:middle
you just go to the Edit menu

345
00:17:51.846 --> 00:17:54.656 A:middle
and select Refactor,
Convert to XCTest.

346
00:17:54.976 --> 00:17:58.106 A:middle
And it will update the
project settings and also all

347
00:17:58.106 --> 00:18:00.506 A:middle
of your test classes
will get updated.

348
00:18:02.256 --> 00:18:04.406 A:middle
The reason for this is
some of the build settings

349
00:18:04.406 --> 00:18:07.246 A:middle
that are associated with
this are not accessible

350
00:18:07.246 --> 00:18:08.306 A:middle
in the Xcode UI.

351
00:18:08.706 --> 00:18:11.426 A:middle
So some people in
the past have tried

352
00:18:11.426 --> 00:18:14.776 A:middle
to do the migration manually
and you know, you end up --

353
00:18:14.776 --> 00:18:17.596 A:middle
you're not able to
do it 100% by hand.

354
00:18:18.136 --> 00:18:20.886 A:middle
If you are, if you really
do want to do it yourself,

355
00:18:22.046 --> 00:18:25.016 A:middle
there's a different way which is
just to create a new test target

356
00:18:25.016 --> 00:18:27.696 A:middle
which is guaranteed to have
exactly the right settings

357
00:18:28.026 --> 00:18:30.386 A:middle
and just move your existing
tests into it manually.

358
00:18:31.236 --> 00:18:35.606 A:middle
So now, let's talk about
Asynchronous Testing,

359
00:18:35.806 --> 00:18:38.216 A:middle
one of our new APIs in Xcode 6.

360
00:18:39.376 --> 00:18:40.356 A:middle
So more and more APIs

361
00:18:40.356 --> 00:18:43.436 A:middle
on our platform themselves
are asynchronous.

362
00:18:43.696 --> 00:18:46.566 A:middle
They have block invocations
when they're done

363
00:18:46.896 --> 00:18:48.696 A:middle
that may get run in
different queues.

364
00:18:49.236 --> 00:18:50.616 A:middle
They have Delegate callbacks

365
00:18:50.616 --> 00:18:52.636 A:middle
that may be deferred
by the [inaudible].

366
00:18:52.986 --> 00:18:54.956 A:middle
They may make network requests

367
00:18:54.956 --> 00:18:57.706 A:middle
which we absolutely know should
be handled asynchronously.

368
00:18:58.396 --> 00:19:00.506 A:middle
Or they're doing
background processing

369
00:19:00.506 --> 00:19:02.206 A:middle
like our NSOperation here.

370
00:19:03.026 --> 00:19:04.986 A:middle
So this creates a challenge

371
00:19:04.986 --> 00:19:08.416 A:middle
because tests themselves
run synchronously.

372
00:19:08.886 --> 00:19:12.186 A:middle
And so, to help you with
that, we've added APIs

373
00:19:12.186 --> 00:19:16.486 A:middle
that will allow you to create
asynchronous control flow

374
00:19:17.186 --> 00:19:19.336 A:middle
that manages asynchronous
activities.

375
00:19:19.956 --> 00:19:23.476 A:middle
And we do this what we
call expectation objects

376
00:19:23.476 --> 00:19:27.056 A:middle
and these describe events
in your test that you expect

377
00:19:27.056 --> 00:19:29.846 A:middle
to happen at some
point in the future,

378
00:19:30.146 --> 00:19:31.456 A:middle
hopefully not too distant.

379
00:19:32.646 --> 00:19:38.176 A:middle
With these objects, XCTest
has an API that would wait

380
00:19:38.176 --> 00:19:39.416 A:middle
for them to be fulfilled.

381
00:19:40.766 --> 00:19:42.286 A:middle
And that takes a timeout

382
00:19:42.286 --> 00:19:44.466 A:middle
and a completion handler
that's called either

383
00:19:44.466 --> 00:19:48.256 A:middle
when the timeout hits or when
all the events are fulfilled.

384
00:19:48.396 --> 00:19:49.186 A:middle
And you can be waiting

385
00:19:49.186 --> 00:19:52.336 A:middle
on multiple asynchronous
events at the same time.

386
00:19:53.756 --> 00:19:55.286 A:middle
So let's look at a code example.

387
00:19:56.266 --> 00:20:00.956 A:middle
UIDocument, as you may know, has
a open with completion handler.

388
00:20:01.076 --> 00:20:03.666 A:middle
There's an asynchronous
opening and that's great

389
00:20:03.666 --> 00:20:06.466 A:middle
because if a large document
might take a little bit of time

390
00:20:06.466 --> 00:20:07.466 A:middle
to open and you don't want

391
00:20:07.466 --> 00:20:11.416 A:middle
to stall the user's interactive
experience while you're waiting

392
00:20:11.416 --> 00:20:11.806 A:middle
for that.

393
00:20:12.476 --> 00:20:14.166 A:middle
So let's write a test for that.

394
00:20:14.166 --> 00:20:16.256 A:middle
The first thing I do is
I create an expectation.

395
00:20:16.256 --> 00:20:20.006 A:middle
And these expectation
creation methods take a string

396
00:20:20.006 --> 00:20:22.486 A:middle
which is simply a
description for your benefit.

397
00:20:22.486 --> 00:20:24.706 A:middle
It tells you if we
had a timeout,

398
00:20:25.556 --> 00:20:27.476 A:middle
it tells you what
we were waiting for.

399
00:20:27.746 --> 00:20:29.726 A:middle
And so the more descriptive
you make that,

400
00:20:29.836 --> 00:20:33.046 A:middle
the easier your life will be.

401
00:20:33.756 --> 00:20:36.846 A:middle
Then we create a document
which I'm not showing here.

402
00:20:36.846 --> 00:20:38.846 A:middle
And we call the
openwithCompletionHandler.

403
00:20:38.846 --> 00:20:41.076 A:middle
And you notice I haven't filled
out the CompletionHandler.

404
00:20:41.076 --> 00:20:42.926 A:middle
It's just an empty
block at this point.

405
00:20:44.356 --> 00:20:45.476 A:middle
We'll get back to
it in a moment.

406
00:20:45.476 --> 00:20:48.476 A:middle
And then finally, I
call waitForExpectations

407
00:20:48.476 --> 00:20:49.896 A:middle
with a 5-second timeout.

408
00:20:50.276 --> 00:20:54.296 A:middle
Probably a little on the long
side but just to be safe here.

409
00:20:54.736 --> 00:20:57.046 A:middle
So what we have now
is asynchronous flow.

410
00:20:57.046 --> 00:21:00.616 A:middle
We have create expectation,
set up the document,

411
<!DOCTYPE HTML PUBLIC '-//IETF//DTD HTML 2.0//EN'> <html> <head><title>403 Forbidden</title></head> <body bgcolor='white'> <h1>403 Forbidden</h1> </body> </html><!DOCTYPE HTML PUBLIC '-//IETF//DTD HTML 2.0//EN'> <html> <head><title>403 Forbidden</title></head> <body bgcolor='white'> <h1>403 Forbidden</h1> </body> </html><!DOCTYPE HTML PUBLIC '-//IETF//DTD HTML 2.0//EN'> <html> <head><title>403 Forbidden</title></head> <body bgcolor='white'> <h1>403 Forbidden</h1> </body> </html><!DOCTYPE HTML PUBLIC '-//IETF//DTD HTML 2.0//EN'> <html> <head><title>403 Forbidden</title></head> <body bgcolor='white'> <h1>403 Forbidden</h1> </body> </html><!DOCTYPE HTML PUBLIC '-//IETF//DTD HTML 2.0//EN'> <html> <head><title>403 Forbidden</title></head> <body bgcolor='white'> <h1>403 Forbidden</h1> </body> </html><!DOCTYPE HTML PUBLIC '-//IETF//DTD HTML 2.0//EN'> <html> <head><title>403 Forbidden</title></head> <body bgcolor='white'> <h1>403 Forbidden</h1> </body> </html>WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

412
00:26:59.516 --> 00:27:02.386 A:middle
to help you measure performance
and detect regressions.

413
00:27:03.116 --> 00:27:05.826 A:middle
We'll also see how
the measurements

414
00:27:05.826 --> 00:27:08.346 A:middle
that these APIs make
to our surface

415
00:27:08.346 --> 00:27:12.796 A:middle
and Xcode UI including
those test failures due

416
00:27:12.796 --> 00:27:13.766 A:middle
to regressions.

417
00:27:14.626 --> 00:27:18.086 A:middle
And now that Xcode is going to
be reporting performance issues

418
00:27:18.616 --> 00:27:21.466 A:middle
as failures, it ought to
give you an easy way to do

419
00:27:21.466 --> 00:27:23.676 A:middle
that investigation so you
can now profile your test

420
00:27:23.676 --> 00:27:24.346 A:middle
with Instruments.

421
00:27:24.906 --> 00:27:29.896 A:middle
The easiest way to do this is
to use the new measureBlock API.

422
00:27:30.246 --> 00:27:31.416 A:middle
This takes a block of code

423
00:27:31.936 --> 00:27:36.716 A:middle
and runs it 10 times measuring
the duration each time

424
00:27:37.976 --> 00:27:39.336 A:middle
and showing the results
in Xcode.

425
00:27:43.376 --> 00:27:48.486 A:middle
So for example, I've got a
test here that I'm writing

426
00:27:48.486 --> 00:27:50.976 A:middle
that I want to measure
the performance

427
00:27:50.976 --> 00:27:51.816 A:middle
of using a fileHandle.

428
00:27:52.406 --> 00:27:53.836 A:middle
So I'll call self measureBlock

429
00:27:54.936 --> 00:27:55.996 A:middle
and then the code
I want to measure.

430
00:27:56.376 --> 00:27:58.356 A:middle
It's creating a fileHandle,
using it

431
00:27:58.356 --> 00:27:59.546 A:middle
and then closing the fileHandle.

432
<!DOCTYPE HTML PUBLIC '-//IETF//DTD HTML 2.0//EN'> <html> <head><title>403 Forbidden</title></head> <body bgcolor='white'> <h1>403 Forbidden</h1> </body> </html><!DOCTYPE HTML PUBLIC '-//IETF//DTD HTML 2.0//EN'> <html> <head><title>403 Forbidden</title></head> <body bgcolor='white'> <h1>403 Forbidden</h1> </body> </html><!DOCTYPE HTML PUBLIC '-//IETF//DTD HTML 2.0//EN'> <html> <head><title>403 Forbidden</title></head> <body bgcolor='white'> <h1>403 Forbidden</h1> </body> </html>WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

433
00:30:59.536 --> 00:31:00.196 A:middle
Yeah, yeah.

434
00:31:00.196 --> 00:31:01.056 A:middle
It is expensive.

435
00:31:01.086 --> 00:31:04.416 A:middle
Okay, so let's just
get rid of this.

436
00:31:04.676 --> 00:31:07.736 A:middle
I'm just going to delete
that and run my test again.

437
00:31:11.676 --> 00:31:13.556 A:middle
And it [inaudible], great.

438
00:31:15.166 --> 00:31:17.686 A:middle
So what you've just seen is you
can use a new measureBlock API

439
00:31:18.056 --> 00:31:20.506 A:middle
to measure performance
and detect regressions.

440
00:31:21.666 --> 00:31:23.526 A:middle
You can view these results
in the Source Editor

441
00:31:23.526 --> 00:31:26.506 A:middle
and the Test Report and you
can also Profile your test

442
00:31:27.126 --> 00:31:27.786 A:middle
with Instruments.

443
00:31:28.236 --> 00:31:30.646 A:middle
So you've just gotten a taste

444
00:31:30.646 --> 00:31:32.746 A:middle
of how Performance
Testing works with Xcode.

445
00:31:32.746 --> 00:31:34.496 A:middle
Now let's go into details.

446
00:31:34.666 --> 00:31:36.106 A:middle
First of all, setting Baselines.

447
00:31:36.386 --> 00:31:40.026 A:middle
For XCTest to report a test as
failing due to a regression,

448
00:31:40.066 --> 00:31:41.916 A:middle
it needs a fixed point
to compare against.

449
00:31:42.386 --> 00:31:43.536 A:middle
And the Baselines
lets us do that.

450
00:31:44.116 --> 00:31:47.336 A:middle
And the Standard Deviation,

451
00:31:49.366 --> 00:31:51.336 A:middle
XCTest should only report
performance regression

452
00:31:51.336 --> 00:31:52.726 A:middle
when something's
actually gotten worse.

453
00:31:53.866 --> 00:31:57.096 A:middle
XCTest uses Standard Deviation
to determine the spread

454
00:31:57.096 --> 00:31:59.266 A:middle
of the measurements, to tell
us how reliable they are.

455
00:31:59.976 --> 00:32:03.056 A:middle
And finally, measuring
precisely.

456
<!DOCTYPE HTML PUBLIC '-//IETF//DTD HTML 2.0//EN'> <html> <head><title>403 Forbidden</title></head> <body bgcolor='white'> <h1>403 Forbidden</h1> </body> </html><!DOCTYPE HTML PUBLIC '-//IETF//DTD HTML 2.0//EN'> <html> <head><title>403 Forbidden</title></head> <body bgcolor='white'> <h1>403 Forbidden</h1> </body> </html>WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

457
00:33:58.176 --> 00:34:01.636 A:middle
and Xcode will use, will
copy the current average

458
00:34:01.796 --> 00:34:02.456 A:middle
to the Baseline.

459
00:34:02.936 --> 00:34:13.755 A:middle
And if I need to set this
again, I can click Edit

460
00:34:14.505 --> 00:34:18.286 A:middle
and either accept the new
current average or type

461
00:34:18.286 --> 00:34:20.266 A:middle
in whatever I want
as the Baseline

462
00:34:20.266 --> 00:34:24.866 A:middle
and I can also edit the maximum
Standard Deviation from here.

463
00:34:25.376 --> 00:34:28.706 A:middle
In order to set the Baseline,
the next time I run my test,

464
00:34:29.235 --> 00:34:31.866 A:middle
I'll see a different annotation
with this gray diamond

465
00:34:31.866 --> 00:34:33.186 A:middle
with the checkmark in it.

466
00:34:33.186 --> 00:34:36.466 A:middle
And it's telling me that
this test is doing 4% worse

467
00:34:36.656 --> 00:34:38.096 A:middle
than the Baseline that
it's compared against.

468
00:34:38.676 --> 00:34:44.985 A:middle
If the test were to do a lot
worse, the test would fail

469
00:34:45.096 --> 00:34:48.376 A:middle
and I'd get an annotation like
this telling me that, you know,

470
00:34:48.596 --> 00:34:50.346 A:middle
it's 68% worse in this case.

471
00:34:50.866 --> 00:34:56.866 A:middle
And I can also see these results
from that new Test Report.

472
00:34:57.446 --> 00:34:59.546 A:middle
Also from the Test Report,
I can get the performances

473
00:34:59.966 --> 00:35:02.756 A:middle
that will pop over by
clicking under the time call

474
<!DOCTYPE HTML PUBLIC '-//IETF//DTD HTML 2.0//EN'> <html> <head><title>403 Forbidden</title></head> <body bgcolor='white'> <h1>403 Forbidden</h1> </body> </html>WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

475
00:35:59.686 --> 00:36:02.106 A:middle
than 10% but it's going
to ignore regressions less

476
00:36:02.106 --> 00:36:03.126 A:middle
than a tenth of a second.

477
00:36:05.126 --> 00:36:06.776 A:middle
But is the average enough?

478
00:36:06.776 --> 00:36:10.376 A:middle
Let's look at that
same dataset again.

479
00:36:11.406 --> 00:36:14.196 A:middle
All the values come through on 1
second with a 1-second average.

480
00:36:16.276 --> 00:36:19.246 A:middle
If I were to run this test again
and get a dataset like this,

481
00:36:20.486 --> 00:36:21.506 A:middle
it hasn't really regressed.

482
00:36:21.506 --> 00:36:23.786 A:middle
The average is still 1 second
but there's some values

483
00:36:23.876 --> 00:36:26.376 A:middle
over 1.5 seconds and
some under 0.5 second.

484
00:36:27.676 --> 00:36:30.946 A:middle
So it isn't a true regression
in terms of the average

485
00:36:30.986 --> 00:36:32.276 A:middle
but something's gotten worse.

486
00:36:32.276 --> 00:36:35.116 A:middle
There is something that if I
were to get a dataset like this,

487
00:36:35.166 --> 00:36:36.196 A:middle
I want it investigated.

488
00:36:36.926 --> 00:36:40.996 A:middle
So the average just doesn't
tell the whole story.

489
00:36:41.146 --> 00:36:43.196 A:middle
And XCTest is going to
use the Standard Deviation

490
00:36:43.636 --> 00:36:45.636 A:middle
to indicate the spread
of the measurements.

491
00:36:46.216 --> 00:36:51.116 A:middle
If we look at that first
dataset one more time,

492
00:36:51.766 --> 00:36:53.356 A:middle
we see that the Standard
Deviation is set

493
00:36:53.356 --> 00:36:55.576 A:middle
for these numbers tightly
[inaudible] around 1 second

494
00:36:55.576 --> 00:36:58.476 A:middle
at 6% while the Standard
Deviation

495
00:36:59.026 --> 00:37:02.266 A:middle
for the much more
spread-out dataset is 40%.

496
00:37:02.886 --> 00:37:06.896 A:middle
And the way XCTest is
going to use this is

497
00:37:07.146 --> 00:37:13.446 A:middle
if the Standard Deviation for
the new dataset is more than 10%

498
00:37:13.446 --> 00:37:15.636 A:middle
of the current average,
which you can adjust

499
00:37:15.746 --> 00:37:18.666 A:middle
from that popover, it will fail.

500
00:37:19.156 --> 00:37:20.786 A:middle
But again, just like
the average,

501
00:37:21.556 --> 00:37:23.786 A:middle
it will ignore Standard
Deviation of less than a tenth

502
00:37:23.786 --> 00:37:28.806 A:middle
of a second, again, to
avoid false positives.

503
00:37:29.166 --> 00:37:31.946 A:middle
So what causes excessive
Standard Deviation?

504
00:37:33.466 --> 00:37:37.126 A:middle
Well, one thing is if the
body you're measuring is doing

505
00:37:37.126 --> 00:37:41.556 A:middle
network I/O or file I/O, that
tends to vary pretty wildly.

506
00:37:42.256 --> 00:37:48.796 A:middle
Another thing that can cause
high Standard Deviation is

507
00:37:49.066 --> 00:37:51.976 A:middle
if the block just isn't trying
to do the same work each time.

508
00:37:51.976 --> 00:37:55.626 A:middle
So for example, if the block
that's being measured does some

509
00:37:55.626 --> 00:37:58.946 A:middle
-- sets up some expensive global
state the first time through

510
00:37:58.946 --> 00:38:02.586 A:middle
and then never again or the
block might just be affected

511
00:38:02.586 --> 00:38:03.866 A:middle
by an uninitialized variables.

512
00:38:04.856 --> 00:38:07.046 A:middle
And lastly, another thing

513
00:38:07.096 --> 00:38:10.686 A:middle
that can cause high
Standard Deviation is

514
00:38:10.686 --> 00:38:12.666 A:middle
if the system is just
busy with other processes

515
00:38:12.846 --> 00:38:17.596 A:middle
and short-running tests are
especially sensitive to this.

516
00:38:17.826 --> 00:38:21.166 A:middle
So how does XCTest
detect issues?

517
00:38:22.036 --> 00:38:24.646 A:middle
First of all, if there's no
Baseline Average, it's done.

518
00:38:24.646 --> 00:38:27.416 A:middle
It's not going to try and do any
analysis of the measurements.

519
00:38:28.216 --> 00:38:31.096 A:middle
If there is a Baseline Average,
first it will check to see

520
00:38:31.096 --> 00:38:33.866 A:middle
if that Standard Deviation is
more than a tenth of a second

521
00:38:34.616 --> 00:38:37.076 A:middle
and more than 10% of
the current average.

522
00:38:37.216 --> 00:38:39.476 A:middle
If it is, it'll fail for that.

523
00:38:39.476 --> 00:38:43.736 A:middle
Otherwise, it'll check to see if
the average is increased by more

524
00:38:43.736 --> 00:38:47.826 A:middle
than a tenth of a second and
more than 10% of the Baseline.

525
00:38:48.826 --> 00:38:49.876 A:middle
And if it is, it'll
fail for that.

526
00:38:50.446 --> 00:38:52.346 A:middle
And otherwise, it'll pass.

527
00:38:54.376 --> 00:38:56.786 A:middle
So how can we minimize
Standard Deviation?

528
00:38:56.786 --> 00:39:00.156 A:middle
Well, one way is to only measure
the code that's important

529
00:39:00.156 --> 00:39:00.286 A:middle
to you.

530
00:39:01.626 --> 00:39:04.596 A:middle
So let's look at how we can do
that with that previous example.

531
00:39:05.206 --> 00:39:08.926 A:middle
Here, this test is doing
the work of setting

532
00:39:08.926 --> 00:39:10.496 A:middle
up a FileHandle using it

533
00:39:10.496 --> 00:39:13.396 A:middle
and then closing the FileHandle
each time we run the block.

534
00:39:13.996 --> 00:39:16.376 A:middle
But if I only want
to measure the time

535
00:39:16.376 --> 00:39:21.476 A:middle
of using the FileHandle, what I
might do is just move the set up

536
00:39:21.476 --> 00:39:23.346 A:middle
and tear down work
outside of the block.

537
00:39:24.286 --> 00:39:25.256 A:middle
But what if I can't do that?

538
00:39:25.936 --> 00:39:27.456 A:middle
Sometimes, the work
that you want

539
00:39:27.456 --> 00:39:29.876 A:middle
to measure requires some
set of work that needs

540
00:39:29.876 --> 00:39:31.646 A:middle
to be done each time
before the measurement.

541
00:39:31.736 --> 00:39:34.206 A:middle
And for that, we have
some additional APIs;

542
00:39:35.066 --> 00:39:37.886 A:middle
measureMetrics automatically
start measuring with a block.

543
00:39:38.376 --> 00:39:39.716 A:middle
You can use this to
measure just part

544
00:39:39.716 --> 00:39:41.436 A:middle
of the block that's
being called.

545
00:39:44.256 --> 00:39:47.836 A:middle
This API expects an array
of metrics to measure

546
00:39:48.706 --> 00:39:50.686 A:middle
and currently only
time is supported.

547
00:39:51.376 --> 00:39:54.866 A:middle
We'll also need two more APIs,

548
00:39:54.866 --> 00:39:56.396 A:middle
startMeasuring and
stopMeasuring.

549
00:39:56.676 --> 00:39:58.206 A:middle
You can use these to
isolate what the part

550
00:39:58.206 --> 00:39:58.976 A:middle
of the block you
want to measure.

551
00:39:59.226 --> 00:40:02.826 A:middle
You can call these once
per block invocation.

552
<!DOCTYPE HTML PUBLIC '-//IETF//DTD HTML 2.0//EN'> <html> <head><title>403 Forbidden</title></head> <body bgcolor='white'> <h1>403 Forbidden</h1> </body> </html><!DOCTYPE HTML PUBLIC '-//IETF//DTD HTML 2.0//EN'> <html> <head><title>403 Forbidden</title></head> <body bgcolor='white'> <h1>403 Forbidden</h1> </body> </html><!DOCTYPE HTML PUBLIC '-//IETF//DTD HTML 2.0//EN'> <html> <head><title>403 Forbidden</title></head> <body bgcolor='white'> <h1>403 Forbidden</h1> </body> </html><!DOCTYPE HTML PUBLIC '-//IETF//DTD HTML 2.0//EN'> <html> <head><title>403 Forbidden</title></head> <body bgcolor='white'> <h1>403 Forbidden</h1> </body> </html>WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

553
00:43:59.586 --> 00:44:02.276 A:middle
So the last thing I'd
like to do with this is

554
00:44:02.276 --> 00:44:03.226 A:middle
like Will showed us earlier.

555
00:44:03.226 --> 00:44:05.896 A:middle
We kind of want our test
to be self-contained.

556
00:44:05.896 --> 00:44:09.906 A:middle
We don't want it to be
loading files from the network.

557
00:44:09.906 --> 00:44:11.226 A:middle
So I'm just going to change this

558
00:44:11.226 --> 00:44:14.016 A:middle
since I've actually
already got a copy

559
00:44:14.136 --> 00:44:15.326 A:middle
of this file in my project.

560
00:44:15.326 --> 00:44:17.876 A:middle
I'm going to use
NSBundle bundleForClass

561
00:44:17.986 --> 00:44:21.846 A:middle
to load this all-month
file from my test project.

562
00:44:23.066 --> 00:44:23.806 A:middle
I'll run it again.

563
00:44:27.996 --> 00:44:28.826 A:middle
And here we go.

564
00:44:29.116 --> 00:44:31.656 A:middle
So now I've got a new
performance test that's

565
00:44:31.656 --> 00:44:34.316 A:middle
measuring the time that
it takes to run this

566
00:44:34.386 --> 00:44:37.936 A:middle
and if something were
to change, I find out.

567
00:44:39.036 --> 00:44:44.416 A:middle
The last thing I want to do is
I want to connect my changes.

568
00:44:44.416 --> 00:44:46.886 A:middle
So here we can see the
changes that I've made so far.

569
00:44:46.886 --> 00:44:48.756 A:middle
I got rid of that really
expensive function.

570
00:44:49.166 --> 00:44:52.806 A:middle
I changed my test to
be a performance test

571
00:44:53.366 --> 00:44:56.256 A:middle
and we can also see the
Baseline that I've added here.

572
00:44:57.036 --> 00:44:58.196 A:middle
So I don't think you
can tell from this,

573
00:44:58.256 --> 00:45:00.446 A:middle
but this is actually a file
that's stored inside the project

574
00:45:00.446 --> 00:45:00.976 A:middle
bundle itself.

575
00:45:08.296 --> 00:45:09.346 A:middle
So I'll connect that.

576
00:45:09.806 --> 00:45:13.936 A:middle
And now it's saved there
for the next time I need it,

577
00:45:14.966 --> 00:45:15.936 A:middle
the next time I need it, okay.

578
00:45:16.516 --> 00:45:23.206 A:middle
[ Applause ]

579
00:45:23.706 --> 00:45:24.586 A:middle
So what you've just seen is

580
00:45:24.586 --> 00:45:26.896 A:middle
that you can use the
new measureBlock APIs

581
00:45:26.946 --> 00:45:28.996 A:middle
to measure performance
in detect regressions.

582
00:45:29.726 --> 00:45:32.526 A:middle
You can tell Xcode
what the Baseline is

583
00:45:32.526 --> 00:45:36.466 A:middle
to specify what constitutes
a regression for your test.

584
00:45:36.846 --> 00:45:41.806 A:middle
And it will -- XCTest will use a
Standard Deviation to inform you

585
00:45:41.806 --> 00:45:43.056 A:middle
of the spread of
the measurements.

586
00:45:43.826 --> 00:45:46.746 A:middle
And finally, when
something does go wrong,

587
00:45:46.836 --> 00:45:48.766 A:middle
you can always use Instruments
to profile your test.

588
00:45:49.526 --> 00:45:50.856 A:middle
Now I'd like to invite
Will back up.

589
00:45:51.516 --> 00:45:54.896 A:middle
[ Applause ]

590
00:45:55.396 --> 00:45:56.076 A:middle
&gt;&gt; Okay great.

591
00:45:56.076 --> 00:45:59.486 A:middle
So just to kind of go back
through everything we've talked

592
00:45:59.486 --> 00:46:02.776 A:middle
about today, we started off
with thinking about, you know,

